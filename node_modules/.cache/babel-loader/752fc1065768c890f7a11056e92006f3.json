{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/atoms/OPlacesAutoComplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/atoms/OPlacesAutoComplete.vue","mtime":1649953715464},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js","mtime":1649977089802}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9uYXZlZW5tdXRoeWFsYS9Eb2N1bWVudHMvUHJvamVjdHMvcmV0dXJuc19wb3J0YWxfdWkvcmV0dXJuc19wb3J0YWxfdWkvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLnN0cmluZy5pbmNsdWRlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBPVGV4dEZpZWxkIGZyb20gJ0AvY29tcG9uZW50cy9tb2xlY3VsZXMvT1RleHRGaWVsZC52dWUnOwovKiBnbG9iYWwgZ29vZ2xlICovCgp2YXIgQUREUkVTU19DT01QT05FTlRTID0gewogIHN1YnByZW1pc2U6ICdzaG9ydF9uYW1lJywKICBzdHJlZXRfbnVtYmVyOiAnc2hvcnRfbmFtZScsCiAgcm91dGU6ICdsb25nX25hbWUnLAogIGxvY2FsaXR5OiAnbG9uZ19uYW1lJywKICBhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzE6ICdzaG9ydF9uYW1lJywKICBhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzI6ICdsb25nX25hbWUnLAogIGNvdW50cnk6ICdsb25nX25hbWUnLAogIHBvc3RhbF9jb2RlOiAnc2hvcnRfbmFtZScKfTsKdmFyIENJVElFU19UWVBFID0gWydsb2NhbGl0eScsICdhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzMnXTsKdmFyIFJFR0lPTlNfVFlQRSA9IFsnbG9jYWxpdHknLCAnc3VibG9jYWxpdHknLCAncG9zdGFsX2NvZGUnLCAnY291bnRyeScsICdhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzEnLCAnYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yJ107Ci8qCiAgICAgIEJ5IGRlZmF1bHQsIHdlJ3JlIG9ubHkgaW5jbHVkaW5nIGJhc2ljIHBsYWNlIGRhdGEgYmVjYXVzZSByZXF1ZXN0aW5nIHRoZXNlCiAgICAgIGZpZWxkcyBwbGFjZSBkYXRhIGlzIG5vdCBhZGRpdGlvbmFsbHkgY2hhcmdlZCBieSBHb29nbGUuIFBsZWFzZSByZWZlciB0bzoKICAgICAgaHR0cHM6Ly9kZXZlbG9wZXJzLmdvb2dsZS5jb20vbWFwcy9iaWxsaW5nL3VuZGVyc3RhbmRpbmctY29zdC1vZi11c2UjYmFzaWMtZGF0YQogICAgKi8KCnZhciBCQVNJQ19EQVRBX0ZJRUxEUyA9IFsnYWRkcmVzc19jb21wb25lbnRzJywgJ2Fkcl9hZGRyZXNzJywgJ2FsdF9pZCcsICdmb3JtYXR0ZWRfYWRkcmVzcycsICdnZW9tZXRyeScsICdpY29uJywgJ2lkJywgJ25hbWUnLCAnYnVzaW5lc3Nfc3RhdHVzJywgJ3Bob3RvJywgJ3BsYWNlX2lkJywgJ3Njb3BlJywgJ3R5cGUnLCAndXJsJywgJ3ZpY2luaXR5J107CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBPVGV4dEZpZWxkOiBPVGV4dEZpZWxkCiAgfSwKICBuYW1lOiAnVnVlR29vZ2xlQXV0b2NvbXBsZXRlJywKICBwcm9wczogewogICAgaWQ6IHsKICAgICAgdHlwZTogU3RyaW5nLAogICAgICByZXF1aXJlZDogdHJ1ZQogICAgfSwKICAgIGNsYXNzbmFtZTogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIHJlcXVpcmVkOiBmYWxzZSwKICAgICAgZGVmYXVsdDogJycKICAgIH0sCiAgICBwbGFjZWhvbGRlcjogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdTdGFydCB0eXBpbmcnCiAgICB9LAogICAgZGlzYWJsZWQ6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdDogZmFsc2UKICAgIH0sCiAgICB0eXBlczogewogICAgICB0eXBlOiBTdHJpbmcsCiAgICAgIGRlZmF1bHQ6ICdhZGRyZXNzJwogICAgfSwKICAgIGZpZWxkczogewogICAgICB0eXBlOiBBcnJheSwKICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7CiAgICAgICAgcmV0dXJuIEJBU0lDX0RBVEFfRklFTERTOwogICAgICB9CiAgICB9LAogICAgY291bnRyeTogewogICAgICB0eXBlOiBbU3RyaW5nLCBBcnJheV0sCiAgICAgIGRlZmF1bHQ6IG51bGwKICAgIH0sCiAgICBlbmFibGVHZW9sb2NhdGlvbjogewogICAgICB0eXBlOiBCb29sZWFuLAogICAgICBkZWZhdWx0OiBmYWxzZQogICAgfSwKICAgIGdlb2xvY2F0aW9uT3B0aW9uczogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6IG51bGwKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICAvKioKICAgICAgICogVGhlIEF1dG9jb21wbGV0ZSBvYmplY3QuCiAgICAgICAqCiAgICAgICAqIEB0eXBlIHtBdXRvY29tcGxldGV9CiAgICAgICAqIEBsaW5rIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9qYXZhc2NyaXB0L3JlZmVyZW5jZSNBdXRvY29tcGxldGUKICAgICAgICovCiAgICAgIGF1dG9jb21wbGV0ZTogbnVsbCwKCiAgICAgIC8qKgogICAgICAgKiBBdXRvY29tcGxldGUgaW5wdXQgdGV4dAogICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgKi8KICAgICAgYXV0b2NvbXBsZXRlVGV4dDogJycsCiAgICAgIGdlb2xvY2F0aW9uOiB7CiAgICAgICAgLyoqCiAgICAgICAgICogR29vZ2xlIEdlb2NvZGVyIE9iamV0CiAgICAgICAgICogQHR5cGUge0dlb2NvZGVyfQogICAgICAgICAqIEBsaW5rIGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tL21hcHMvZG9jdW1lbnRhdGlvbi9qYXZhc2NyaXB0L3JlZmVyZW5jZSNHZW9jb2RlcgogICAgICAgICAqLwogICAgICAgIGdlb2NvZGVyOiBudWxsLAoKICAgICAgICAvKioKICAgICAgICAgKiBGaWxsZWQgYWZ0ZXIgZ2VvbG9jYXRlIHJlc3VsdAogICAgICAgICAqIEB0eXBlIHtDb29yZGluYXRlc30KICAgICAgICAgKiBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQ29vcmRpbmF0ZXMKICAgICAgICAgKi8KICAgICAgICBsb2M6IG51bGwsCgogICAgICAgIC8qKgogICAgICAgICAqIEZpbGxlZCBhZnRlciBnZW9sb2NhdGUgcmVzdWx0CiAgICAgICAgICogQHR5cGUge1Bvc2l0aW9ufQogICAgICAgICAqIEBsaW5rIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9Qb3NpdGlvbgogICAgICAgICAqLwogICAgICAgIHBvc2l0aW9uOiBudWxsCiAgICAgIH0KICAgIH07CiAgfSwKICB3YXRjaDogewogICAgYXV0b2NvbXBsZXRlVGV4dDogZnVuY3Rpb24gYXV0b2NvbXBsZXRlVGV4dChuZXdWYWwsIG9sZFZhbCkgewogICAgICB0aGlzLiRlbWl0KCdpbnB1dENoYW5nZScsIHsKICAgICAgICBuZXdWYWw6IG5ld1ZhbCwKICAgICAgICBvbGRWYWw6IG9sZFZhbAogICAgICB9LCB0aGlzLmlkKTsKICAgIH0sCiAgICBjb3VudHJ5OiBmdW5jdGlvbiBjb3VudHJ5KG5ld1ZhbCwgb2xkVmFsKSB7CiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlLnNldENvbXBvbmVudFJlc3RyaWN0aW9ucyh7CiAgICAgICAgY291bnRyeTogdGhpcy5jb3VudHJ5ID09PSBudWxsID8gW10gOiB0aGlzLmNvdW50cnkKICAgICAgfSk7CiAgICB9CiAgfSwKICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkKCkgewogICAgdmFyIG9wdGlvbnMgPSB7fTsKCiAgICBpZiAodGhpcy50eXBlcykgewogICAgICBvcHRpb25zLnR5cGVzID0gW3RoaXMudHlwZXNdOwogICAgfQoKICAgIGlmICh0aGlzLmNvdW50cnkpIHsKICAgICAgb3B0aW9ucy5jb21wb25lbnRSZXN0cmljdGlvbnMgPSB7CiAgICAgICAgY291bnRyeTogdGhpcy5jb3VudHJ5CiAgICAgIH07CiAgICB9CgogICAgdGhpcy5hdXRvY29tcGxldGUgPSBuZXcgZ29vZ2xlLm1hcHMucGxhY2VzLkF1dG9jb21wbGV0ZShkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKSwgb3B0aW9ucyk7CiAgICB0aGlzLmF1dG9jb21wbGV0ZS5zZXRGaWVsZHModGhpcy5maWVsZHMpOwogICAgdGhpcy5hdXRvY29tcGxldGUuYWRkTGlzdGVuZXIoJ3BsYWNlX2NoYW5nZWQnLCB0aGlzLm9uUGxhY2VDaGFuZ2VkKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8qKgogICAgICogV2hlbiBhIHBsYWNlIGNoYW5nZWQKICAgICAqLwogICAgb25QbGFjZUNoYW5nZWQ6IGZ1bmN0aW9uIG9uUGxhY2VDaGFuZ2VkKCkgewogICAgICB2YXIgcGxhY2UgPSB0aGlzLmF1dG9jb21wbGV0ZS5nZXRQbGFjZSgpOwoKICAgICAgaWYgKCFwbGFjZS5nZW9tZXRyeSkgewogICAgICAgIC8vIFVzZXIgZW50ZXJlZCB0aGUgbmFtZSBvZiBhIFBsYWNlIHRoYXQgd2FzIG5vdCBzdWdnZXN0ZWQgYW5kCiAgICAgICAgLy8gcHJlc3NlZCB0aGUgRW50ZXIga2V5LCBvciB0aGUgUGxhY2UgRGV0YWlscyByZXF1ZXN0IGZhaWxlZC4KICAgICAgICB0aGlzLiRlbWl0KCduby1yZXN1bHRzLWZvdW5kJywgcGxhY2UsIHRoaXMuaWQpOwogICAgICAgIHJldHVybjsKICAgICAgfQoKICAgICAgaWYgKHBsYWNlLmFkZHJlc3NfY29tcG9uZW50cyAhPT0gdW5kZWZpbmVkKSB7CiAgICAgICAgLy8gcmV0dXJuIHJldHVybkRhdGEgb2JqZWN0IGFuZCBQbGFjZVJlc3VsdCBvYmplY3QKICAgICAgICB0aGlzLiRlbWl0KCdwbGFjZWNoYW5nZWQnLCB0aGlzLmZvcm1hdFJlc3VsdChwbGFjZSksIHBsYWNlLCB0aGlzLmlkKTsgLy8gdXBkYXRlIGF1dG9jb21wbGV0ZVRleHQgdGhlbiBlbWl0IGNoYW5nZSBldmVudAoKICAgICAgICB0aGlzLmF1dG9jb21wbGV0ZVRleHQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmlkKS52YWx1ZTsKICAgICAgICB0aGlzLm9uQ2hhbmdlKCk7CiAgICAgIH0KICAgIH0sCgogICAgLyoqCiAgICAgKiBXaGVuIHRoZSBpbnB1dCBnZXRzIGZvY3VzCiAgICAgKi8KICAgIG9uRm9jdXM6IGZ1bmN0aW9uIG9uRm9jdXMoKSB7CiAgICAgIHRoaXMuYmlhc0F1dG9jb21wbGV0ZUxvY2F0aW9uKCk7CiAgICAgIHRoaXMuJGVtaXQoJ2ZvY3VzJyk7CiAgICB9LAoKICAgIC8qKgogICAgICogV2hlbiB0aGUgaW5wdXQgbG9zZXMgZm9jdXMKICAgICAqLwogICAgb25CbHVyOiBmdW5jdGlvbiBvbkJsdXIoKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2JsdXInKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBXaGVuIHRoZSBpbnB1dCBnb3QgY2hhbmdlZAogICAgICovCiAgICBvbkNoYW5nZTogZnVuY3Rpb24gb25DaGFuZ2UoKSB7CiAgICAgIHRoaXMuJGVtaXQoJ2NoYW5nZScsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMuaWQpLnZhbHVlKTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBXaGVuIGEga2V5IGdldHMgcHJlc3NlZAogICAgICogQHBhcmFtICB7RXZlbnR9IGV2ZW50IEEga2V5cHJlc3MgZXZlbnQKICAgICAqLwogICAgb25LZXlQcmVzczogZnVuY3Rpb24gb25LZXlQcmVzcyhldmVudCkgewogICAgICB0aGlzLiRlbWl0KCdrZXlwcmVzcycsIGV2ZW50KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBXaGVuIGEga2V5dXAgb2NjdXJzCiAgICAgKiBAcGFyYW0gIHtFdmVudH0gZXZlbnQgQSBrZXl1cCBldmVudAogICAgICovCiAgICBvbktleVVwOiBmdW5jdGlvbiBvbktleVVwKGV2ZW50KSB7CiAgICAgIHRoaXMuJGVtaXQoJ2tleXVwJywgZXZlbnQpOwogICAgfSwKCiAgICAvKioKICAgICAqIENsZWFyIHRoZSBpbnB1dAogICAgICovCiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7CiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlVGV4dCA9ICcnOwogICAgfSwKCiAgICAvKioKICAgICAqIEZvY3VzIHRoZSBpbnB1dAogICAgICovCiAgICBmb2N1czogZnVuY3Rpb24gZm9jdXMoKSB7CiAgICAgIHRoaXMuJHJlZnMuYXV0b2NvbXBsZXRlLmZvY3VzKCk7CiAgICB9LAoKICAgIC8qKgogICAgICogQmx1ciB0aGUgaW5wdXQKICAgICAqLwogICAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHsKICAgICAgdGhpcy4kcmVmcy5hdXRvY29tcGxldGUuYmx1cigpOwogICAgfSwKCiAgICAvKioKICAgICAqIFVwZGF0ZSB0aGUgdmFsdWUgb2YgdGhlIGlucHV0CiAgICAgKiBAcGFyYW0gIHtTdHJpbmd9IHZhbHVlCiAgICAgKi8KICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKHZhbHVlKSB7CiAgICAgIHRoaXMuYXV0b2NvbXBsZXRlVGV4dCA9IHZhbHVlOwogICAgfSwKCiAgICAvKioKICAgICAqIFVwZGF0ZSB0aGUgY29vcmRpbmF0ZXMgb2YgdGhlIGlucHV0CiAgICAgKiBAcGFyYW0gIHtDb29yZGluYXRlc30gdmFsdWUKICAgICAqLwogICAgdXBkYXRlQ29vcmRpbmF0ZXM6IGZ1bmN0aW9uIHVwZGF0ZUNvb3JkaW5hdGVzKHZhbHVlKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICBpZiAoIXZhbHVlICYmICEodmFsdWUubGF0IHx8IHZhbHVlLmxuZykpIHJldHVybjsKCiAgICAgIGlmICghdGhpcy5nZW9sb2NhdGlvbi5nZW9jb2RlcikgewogICAgICAgIHRoaXMuZ2VvbG9jYXRpb24uZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsKICAgICAgfQoKICAgICAgdGhpcy5nZW9sb2NhdGlvbi5nZW9jb2Rlci5nZW9jb2RlKHsKICAgICAgICBsb2NhdGlvbjogdmFsdWUKICAgICAgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykgewogICAgICAgIGlmIChzdGF0dXMgPT09ICdPSycpIHsKICAgICAgICAgIHJlc3VsdHMgPSBfdGhpcy5maWx0ZXJHZW9jb2RlUmVzdWx0VHlwZXMocmVzdWx0cyk7CgogICAgICAgICAgaWYgKHJlc3VsdHNbMF0pIHsKICAgICAgICAgICAgX3RoaXMuJGVtaXQoJ3BsYWNlY2hhbmdlZCcsIF90aGlzLmZvcm1hdFJlc3VsdChyZXN1bHRzWzBdKSwgcmVzdWx0c1swXSwgX3RoaXMuaWQpOwoKICAgICAgICAgICAgX3RoaXMudXBkYXRlKHJlc3VsdHNbMF0uZm9ybWF0dGVkX2FkZHJlc3MpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3RoaXMuJGVtaXQoJ2Vycm9yJywgJ25vIHJlc3VsdCBmb3IgcHJvdmlkZWQgY29vcmRpbmF0ZXMnKTsKICAgICAgICAgIH0KICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3RoaXMuJGVtaXQoJ2Vycm9yJywgJ2Vycm9yIGdldHRpbmcgYWRkcmVzcyBmcm9tIGNvb3JkcycpOwogICAgICAgIH0KICAgICAgfSk7CiAgICB9LAoKICAgIC8qKgogICAgICogVXBkYXRlIGxvY2F0aW9uIGJhc2VkIG9uIG5hdmlnYXRvciBnZW9sb2NhdGlvbgogICAgICovCiAgICBnZW9sb2NhdGU6IGZ1bmN0aW9uIGdlb2xvY2F0ZSgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICB0aGlzLnVwZGF0ZUdlb2xvY2F0aW9uKGZ1bmN0aW9uIChnZW9sb2NhdGlvbiwgcG9zaXRpb24pIHsKICAgICAgICBfdGhpczIudXBkYXRlQ29vcmRpbmF0ZXMoZ2VvbG9jYXRpb24pOwogICAgICB9KTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBVcGRhdGUgaW50ZXJuYWwgbG9jYXRpb24gZnJvbSBuYXZpZ2F0b3IgZ2VvbG9jYXRpb24KICAgICAqIEBwYXJhbSAge0Z1bmN0aW9ufSAoZ2VvbG9jYXRpb24sIHBvc2l0aW9uKQogICAgICovCiAgICB1cGRhdGVHZW9sb2NhdGlvbjogZnVuY3Rpb24gdXBkYXRlR2VvbG9jYXRpb24oKSB7CiAgICAgIHZhciBfdGhpczMgPSB0aGlzOwoKICAgICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBudWxsOwoKICAgICAgaWYgKG5hdmlnYXRvci5nZW9sb2NhdGlvbikgewogICAgICAgIHZhciBvcHRpb25zID0ge307CgogICAgICAgIGlmICh0aGlzLmdlb2xvY2F0aW9uT3B0aW9ucykgewogICAgICAgICAgT2JqZWN0LmFzc2lnbihvcHRpb25zLCB0aGlzLmdlb2xvY2F0aW9uT3B0aW9ucyk7CiAgICAgICAgfQoKICAgICAgICBuYXZpZ2F0b3IuZ2VvbG9jYXRpb24uZ2V0Q3VycmVudFBvc2l0aW9uKGZ1bmN0aW9uIChwb3NpdGlvbikgewogICAgICAgICAgdmFyIGdlb2xvY2F0aW9uID0gewogICAgICAgICAgICBsYXQ6IHBvc2l0aW9uLmNvb3Jkcy5sYXRpdHVkZSwKICAgICAgICAgICAgbG5nOiBwb3NpdGlvbi5jb29yZHMubG9uZ2l0dWRlCiAgICAgICAgICB9OwogICAgICAgICAgX3RoaXMzLmdlb2xvY2F0aW9uLmxvYyA9IGdlb2xvY2F0aW9uOwogICAgICAgICAgX3RoaXMzLmdlb2xvY2F0aW9uLnBvc2l0aW9uID0gcG9zaXRpb247CiAgICAgICAgICBpZiAoY2FsbGJhY2spIGNhbGxiYWNrKGdlb2xvY2F0aW9uLCBwb3NpdGlvbik7CiAgICAgICAgfSwgZnVuY3Rpb24gKGVycikgewogICAgICAgICAgX3RoaXMzLiRlbWl0KCdlcnJvcicsICdDYW5ub3QgZ2V0IENvb3JkaW5hdGVzIGZyb20gbmF2aWdhdG9yJywgZXJyKTsKICAgICAgICB9LCBvcHRpb25zKTsKICAgICAgfQogICAgfSwKICAgIC8vIEJpYXMgdGhlIGF1dG9jb21wbGV0ZSBvYmplY3QgdG8gdGhlIHVzZXIncyBnZW9ncmFwaGljYWwgbG9jYXRpb24sCiAgICAvLyBhcyBzdXBwbGllZCBieSB0aGUgYnJvd3NlcidzICduYXZpZ2F0b3IuZ2VvbG9jYXRpb24nIG9iamVjdC4KICAgIGJpYXNBdXRvY29tcGxldGVMb2NhdGlvbjogZnVuY3Rpb24gYmlhc0F1dG9jb21wbGV0ZUxvY2F0aW9uKCkgewogICAgICB2YXIgX3RoaXM0ID0gdGhpczsKCiAgICAgIGlmICh0aGlzLmVuYWJsZUdlb2xvY2F0aW9uKSB7CiAgICAgICAgdGhpcy51cGRhdGVHZW9sb2NhdGlvbihmdW5jdGlvbiAoZ2VvbG9jYXRpb24sIHBvc2l0aW9uKSB7CiAgICAgICAgICB2YXIgY2lyY2xlID0gbmV3IGdvb2dsZS5tYXBzLkNpcmNsZSh7CiAgICAgICAgICAgIGNlbnRlcjogZ2VvbG9jYXRpb24sCiAgICAgICAgICAgIHJhZGl1czogcG9zaXRpb24uY29vcmRzLmFjY3VyYWN5CiAgICAgICAgICB9KTsKCiAgICAgICAgICBfdGhpczQuYXV0b2NvbXBsZXRlLnNldEJvdW5kcyhjaXJjbGUuZ2V0Qm91bmRzKCkpOwogICAgICAgIH0pOwogICAgICB9CiAgICB9LAoKICAgIC8qKgogICAgICogRm9ybWF0IHJlc3VsdCBmcm9tIEdlbyBnb29nbGUgQVBJcwogICAgICogQHBhcmFtIHBsYWNlCiAgICAgKiBAcmV0dXJucyB7e2Zvcm1hdHRlZCBvdXRwdXR9fQogICAgICovCiAgICBmb3JtYXRSZXN1bHQ6IGZ1bmN0aW9uIGZvcm1hdFJlc3VsdChwbGFjZSkgewogICAgICB2YXIgcmV0dXJuRGF0YSA9IHt9OwoKICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwbGFjZS5hZGRyZXNzX2NvbXBvbmVudHMubGVuZ3RoOyBpKyspIHsKICAgICAgICB2YXIgYWRkcmVzc1R5cGUgPSBwbGFjZS5hZGRyZXNzX2NvbXBvbmVudHNbaV0udHlwZXNbMF07CgogICAgICAgIGlmIChBRERSRVNTX0NPTVBPTkVOVFNbYWRkcmVzc1R5cGVdKSB7CiAgICAgICAgICB2YXIgdmFsID0gcGxhY2UuYWRkcmVzc19jb21wb25lbnRzW2ldW0FERFJFU1NfQ09NUE9ORU5UU1thZGRyZXNzVHlwZV1dOwogICAgICAgICAgcmV0dXJuRGF0YVthZGRyZXNzVHlwZV0gPSB2YWw7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm5EYXRhLmxhdGl0dWRlID0gcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubGF0KCk7CiAgICAgIHJldHVybkRhdGEubG9uZ2l0dWRlID0gcGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubG5nKCk7CiAgICAgIHJldHVybiByZXR1cm5EYXRhOwogICAgfSwKCiAgICAvKioKICAgICAqIEV4dHJhY3QgY29uZmlndXJlZCB0eXBlcyBvdXQgb2YgcmF3IHJlc3VsdCBhcwogICAgICogR2VvY29kZSBBUEkgZG9lcyBub3QgYWxsb3cgdG8gZG8gaXQKICAgICAqIEBwYXJhbSByZXN1bHRzCiAgICAgKiBAcmV0dXJucyB7R2VvY29kZXJSZXN1bHR9CiAgICAgKiBAbGluayBodHRwczovL2RldmVsb3BlcnMuZ29vZ2xlLmNvbS9tYXBzL2RvY3VtZW50YXRpb24vamF2YXNjcmlwdC9yZWZlcmVuY2UjR2VvY29kZXJSZXN1bHQKICAgICAqLwogICAgZmlsdGVyR2VvY29kZVJlc3VsdFR5cGVzOiBmdW5jdGlvbiBmaWx0ZXJHZW9jb2RlUmVzdWx0VHlwZXMocmVzdWx0cykgewogICAgICBpZiAoIXJlc3VsdHMgfHwgIXRoaXMudHlwZXMpIHJldHVybiByZXN1bHRzOwogICAgICB2YXIgb3V0cHV0ID0gW107CiAgICAgIHZhciB0eXBlcyA9IFt0aGlzLnR5cGVzXTsKICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKCcoY2l0aWVzKScpKSB0eXBlcyA9IHR5cGVzLmNvbmNhdChDSVRJRVNfVFlQRSk7CiAgICAgIGlmICh0eXBlcy5pbmNsdWRlcygnKHJlZ2lvbnMpJykpIHR5cGVzID0gdHlwZXMuY29uY2F0KFJFR0lPTlNfVFlQRSk7CgogICAgICB2YXIgX2l0ZXJhdG9yID0gX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIocmVzdWx0cyksCiAgICAgICAgICBfc3RlcDsKCiAgICAgIHRyeSB7CiAgICAgICAgZm9yIChfaXRlcmF0b3IucygpOyAhKF9zdGVwID0gX2l0ZXJhdG9yLm4oKSkuZG9uZTspIHsKICAgICAgICAgIHZhciByID0gX3N0ZXAudmFsdWU7CgogICAgICAgICAgdmFyIF9pdGVyYXRvcjIgPSBfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlcihyLnR5cGVzKSwKICAgICAgICAgICAgICBfc3RlcDI7CgogICAgICAgICAgdHJ5IHsKICAgICAgICAgICAgZm9yIChfaXRlcmF0b3IyLnMoKTsgIShfc3RlcDIgPSBfaXRlcmF0b3IyLm4oKSkuZG9uZTspIHsKICAgICAgICAgICAgICB2YXIgdCA9IF9zdGVwMi52YWx1ZTsKCiAgICAgICAgICAgICAgaWYgKHR5cGVzLmluY2x1ZGVzKHQpKSB7CiAgICAgICAgICAgICAgICBvdXRwdXQucHVzaChyKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgfSBjYXRjaCAoZXJyKSB7CiAgICAgICAgICAgIF9pdGVyYXRvcjIuZShlcnIpOwogICAgICAgICAgfSBmaW5hbGx5IHsKICAgICAgICAgICAgX2l0ZXJhdG9yMi5mKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGNhdGNoIChlcnIpIHsKICAgICAgICBfaXRlcmF0b3IuZShlcnIpOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIF9pdGVyYXRvci5mKCk7CiAgICAgIH0KCiAgICAgIHJldHVybiBvdXRwdXQ7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["OPlacesAutoComplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAsBA,OAAA,UAAA,MAAA,uCAAA;AACA;;AACA,IAAA,kBAAA,GAAA;AACA,EAAA,UAAA,EAAA,YADA;AAEA,EAAA,aAAA,EAAA,YAFA;AAGA,EAAA,KAAA,EAAA,WAHA;AAIA,EAAA,QAAA,EAAA,WAJA;AAKA,EAAA,2BAAA,EAAA,YALA;AAMA,EAAA,2BAAA,EAAA,WANA;AAOA,EAAA,OAAA,EAAA,WAPA;AAQA,EAAA,WAAA,EAAA;AARA,CAAA;AAUA,IAAA,WAAA,GAAA,CAAA,UAAA,EAAA,6BAAA,CAAA;AACA,IAAA,YAAA,GAAA,CACA,UADA,EAEA,aAFA,EAGA,aAHA,EAIA,SAJA,EAKA,6BALA,EAMA,6BANA,CAAA;AAQA;AACA;AACA;AACA;AACA;;AACA,IAAA,iBAAA,GAAA,CACA,oBADA,EAEA,aAFA,EAGA,QAHA,EAIA,mBAJA,EAKA,UALA,EAMA,MANA,EAOA,IAPA,EAQA,MARA,EASA,iBATA,EAUA,OAVA,EAWA,UAXA,EAYA,OAZA,EAaA,MAbA,EAcA,KAdA,EAeA,UAfA,CAAA;AAiBA,eAAA;AACA,EAAA,UAAA,EAAA;AAAA,IAAA,UAAA,EAAA;AAAA,GADA;AAEA,EAAA,IAAA,EAAA,uBAFA;AAGA,EAAA,KAAA,EAAA;AACA,IAAA,EAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA;AAFA,KADA;AAKA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,QAAA,EAAA,KAFA;AAGA,MAAA,OAAA,EAAA;AAHA,KALA;AAUA,IAAA,WAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAVA;AAcA,IAAA,QAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAdA;AAkBA,IAAA,KAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAlBA;AAsBA,IAAA,MAAA,EAAA;AACA,MAAA,IAAA,EAAA,KADA;AAEA,MAAA,OAAA,EAAA,oBAAA;AACA,eAAA,iBAAA;AACA;AAJA,KAtBA;AA4BA,IAAA,OAAA,EAAA;AACA,MAAA,IAAA,EAAA,CAAA,MAAA,EAAA,KAAA,CADA;AAEA,MAAA,OAAA,EAAA;AAFA,KA5BA;AAgCA,IAAA,iBAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAEA,MAAA,OAAA,EAAA;AAFA,KAhCA;AAoCA,IAAA,kBAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAEA,MAAA,OAAA,EAAA;AAFA;AApCA,GAHA;AA4CA,EAAA,IA5CA,kBA4CA;AACA,WAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAA,YAAA,EAAA,IAPA;;AAQA;AACA;AACA;AACA;AACA,MAAA,gBAAA,EAAA,EAZA;AAaA,MAAA,WAAA,EAAA;AACA;AACA;AACA;AACA;AACA;AACA,QAAA,QAAA,EAAA,IANA;;AAOA;AACA;AACA;AACA;AACA;AACA,QAAA,GAAA,EAAA,IAZA;;AAaA;AACA;AACA;AACA;AACA;AACA,QAAA,QAAA,EAAA;AAlBA;AAbA,KAAA;AAkCA,GA/EA;AAgFA,EAAA,KAAA,EAAA;AACA,IAAA,gBAAA,EAAA,0BAAA,MAAA,EAAA,MAAA,EAAA;AACA,WAAA,KAAA,CAAA,aAAA,EAAA;AAAA,QAAA,MAAA,EAAA,MAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA,EAAA,KAAA,EAAA;AACA,KAHA;AAIA,IAAA,OAAA,EAAA,iBAAA,MAAA,EAAA,MAAA,EAAA;AACA,WAAA,YAAA,CAAA,wBAAA,CAAA;AACA,QAAA,OAAA,EAAA,KAAA,OAAA,KAAA,IAAA,GAAA,EAAA,GAAA,KAAA;AADA,OAAA;AAGA;AARA,GAhFA;AA0FA,EAAA,OAAA,EAAA,mBAAA;AACA,QAAA,OAAA,GAAA,EAAA;;AACA,QAAA,KAAA,KAAA,EAAA;AACA,MAAA,OAAA,CAAA,KAAA,GAAA,CAAA,KAAA,KAAA,CAAA;AACA;;AACA,QAAA,KAAA,OAAA,EAAA;AACA,MAAA,OAAA,CAAA,qBAAA,GAAA;AACA,QAAA,OAAA,EAAA,KAAA;AADA,OAAA;AAGA;;AACA,SAAA,YAAA,GAAA,IAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,YAAA,CACA,QAAA,CAAA,cAAA,CAAA,KAAA,EAAA,CADA,EAEA,OAFA,CAAA;AAIA,SAAA,YAAA,CAAA,SAAA,CAAA,KAAA,MAAA;AACA,SAAA,YAAA,CAAA,WAAA,CAAA,eAAA,EAAA,KAAA,cAAA;AACA,GA1GA;AA2GA,EAAA,OAAA,EAAA;AACA;AACA;AACA;AACA,IAAA,cAJA,4BAIA;AACA,UAAA,KAAA,GAAA,KAAA,YAAA,CAAA,QAAA,EAAA;;AACA,UAAA,CAAA,KAAA,CAAA,QAAA,EAAA;AACA;AACA;AACA,aAAA,KAAA,CAAA,kBAAA,EAAA,KAAA,EAAA,KAAA,EAAA;AACA;AACA;;AACA,UAAA,KAAA,CAAA,kBAAA,KAAA,SAAA,EAAA;AACA;AACA,aAAA,KAAA,CAAA,cAAA,EAAA,KAAA,YAAA,CAAA,KAAA,CAAA,EAAA,KAAA,EAAA,KAAA,EAAA,EAFA,CAGA;;AACA,aAAA,gBAAA,GAAA,QAAA,CAAA,cAAA,CAAA,KAAA,EAAA,EAAA,KAAA;AACA,aAAA,QAAA;AACA;AACA,KAnBA;;AAoBA;AACA;AACA;AACA,IAAA,OAvBA,qBAuBA;AACA,WAAA,wBAAA;AACA,WAAA,KAAA,CAAA,OAAA;AACA,KA1BA;;AA2BA;AACA;AACA;AACA,IAAA,MA9BA,oBA8BA;AACA,WAAA,KAAA,CAAA,MAAA;AACA,KAhCA;;AAiCA;AACA;AACA;AACA,IAAA,QApCA,sBAoCA;AACA,WAAA,KAAA,CAAA,QAAA,EAAA,QAAA,CAAA,cAAA,CAAA,KAAA,EAAA,EAAA,KAAA;AACA,KAtCA;;AAuCA;AACA;AACA;AACA;AACA,IAAA,UA3CA,sBA2CA,KA3CA,EA2CA;AACA,WAAA,KAAA,CAAA,UAAA,EAAA,KAAA;AACA,KA7CA;;AA8CA;AACA;AACA;AACA;AACA,IAAA,OAlDA,mBAkDA,KAlDA,EAkDA;AACA,WAAA,KAAA,CAAA,OAAA,EAAA,KAAA;AACA,KApDA;;AAqDA;AACA;AACA;AACA,IAAA,KAxDA,mBAwDA;AACA,WAAA,gBAAA,GAAA,EAAA;AACA,KA1DA;;AA2DA;AACA;AACA;AACA,IAAA,KA9DA,mBA8DA;AACA,WAAA,KAAA,CAAA,YAAA,CAAA,KAAA;AACA,KAhEA;;AAiEA;AACA;AACA;AACA,IAAA,IApEA,kBAoEA;AACA,WAAA,KAAA,CAAA,YAAA,CAAA,IAAA;AACA,KAtEA;;AAuEA;AACA;AACA;AACA;AACA,IAAA,MA3EA,kBA2EA,KA3EA,EA2EA;AACA,WAAA,gBAAA,GAAA,KAAA;AACA,KA7EA;;AA8EA;AACA;AACA;AACA;AACA,IAAA,iBAlFA,6BAkFA,KAlFA,EAkFA;AAAA;;AACA,UAAA,CAAA,KAAA,IAAA,EAAA,KAAA,CAAA,GAAA,IAAA,KAAA,CAAA,GAAA,CAAA,EAAA;;AACA,UAAA,CAAA,KAAA,WAAA,CAAA,QAAA,EAAA;AACA,aAAA,WAAA,CAAA,QAAA,GAAA,IAAA,MAAA,CAAA,IAAA,CAAA,QAAA,EAAA;AACA;;AACA,WAAA,WAAA,CAAA,QAAA,CAAA,OAAA,CACA;AAAA,QAAA,QAAA,EAAA;AAAA,OADA,EAEA,UAAA,OAAA,EAAA,MAAA,EAAA;AACA,YAAA,MAAA,KAAA,IAAA,EAAA;AACA,UAAA,OAAA,GAAA,KAAA,CAAA,wBAAA,CAAA,OAAA,CAAA;;AACA,cAAA,OAAA,CAAA,CAAA,CAAA,EAAA;AACA,YAAA,KAAA,CAAA,KAAA,CACA,cADA,EAEA,KAAA,CAAA,YAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAFA,EAGA,OAAA,CAAA,CAAA,CAHA,EAIA,KAAA,CAAA,EAJA;;AAMA,YAAA,KAAA,CAAA,MAAA,CAAA,OAAA,CAAA,CAAA,CAAA,CAAA,iBAAA;AACA,WARA,MAQA;AACA,YAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,oCAAA;AACA;AACA,SAbA,MAaA;AACA,UAAA,KAAA,CAAA,KAAA,CAAA,OAAA,EAAA,mCAAA;AACA;AACA,OAnBA;AAqBA,KA5GA;;AA6GA;AACA;AACA;AACA,IAAA,SAhHA,uBAgHA;AAAA;;AACA,WAAA,iBAAA,CAAA,UAAA,WAAA,EAAA,QAAA,EAAA;AACA,QAAA,MAAA,CAAA,iBAAA,CAAA,WAAA;AACA,OAFA;AAGA,KApHA;;AAqHA;AACA;AACA;AACA;AACA,IAAA,iBAzHA,+BAyHA;AAAA;;AAAA,UAAA,QAAA,uEAAA,IAAA;;AACA,UAAA,SAAA,CAAA,WAAA,EAAA;AACA,YAAA,OAAA,GAAA,EAAA;;AACA,YAAA,KAAA,kBAAA,EAAA;AACA,UAAA,MAAA,CAAA,MAAA,CAAA,OAAA,EAAA,KAAA,kBAAA;AACA;;AACA,QAAA,SAAA,CAAA,WAAA,CAAA,kBAAA,CACA,UAAA,QAAA,EAAA;AACA,cAAA,WAAA,GAAA;AACA,YAAA,GAAA,EAAA,QAAA,CAAA,MAAA,CAAA,QADA;AAEA,YAAA,GAAA,EAAA,QAAA,CAAA,MAAA,CAAA;AAFA,WAAA;AAIA,UAAA,MAAA,CAAA,WAAA,CAAA,GAAA,GAAA,WAAA;AACA,UAAA,MAAA,CAAA,WAAA,CAAA,QAAA,GAAA,QAAA;AACA,cAAA,QAAA,EAAA,QAAA,CAAA,WAAA,EAAA,QAAA,CAAA;AACA,SATA,EAUA,UAAA,GAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,OAAA,EAAA,uCAAA,EAAA,GAAA;AACA,SAZA,EAaA,OAbA;AAeA;AACA,KA/IA;AAgJA;AACA;AACA,IAAA,wBAlJA,sCAkJA;AAAA;;AACA,UAAA,KAAA,iBAAA,EAAA;AACA,aAAA,iBAAA,CAAA,UAAA,WAAA,EAAA,QAAA,EAAA;AACA,cAAA,MAAA,GAAA,IAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA;AACA,YAAA,MAAA,EAAA,WADA;AAEA,YAAA,MAAA,EAAA,QAAA,CAAA,MAAA,CAAA;AAFA,WAAA,CAAA;;AAIA,UAAA,MAAA,CAAA,YAAA,CAAA,SAAA,CAAA,MAAA,CAAA,SAAA,EAAA;AACA,SANA;AAOA;AACA,KA5JA;;AA6JA;AACA;AACA;AACA;AACA;AACA,IAAA,YAlKA,wBAkKA,KAlKA,EAkKA;AACA,UAAA,UAAA,GAAA,EAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAA,CAAA,GAAA,KAAA,CAAA,kBAAA,CAAA,MAAA,EAAA,CAAA,EAAA,EAAA;AACA,YAAA,WAAA,GAAA,KAAA,CAAA,kBAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA;;AACA,YAAA,kBAAA,CAAA,WAAA,CAAA,EAAA;AACA,cAAA,GAAA,GACA,KAAA,CAAA,kBAAA,CAAA,CAAA,EAAA,kBAAA,CAAA,WAAA,CAAA,CADA;AAEA,UAAA,UAAA,CAAA,WAAA,CAAA,GAAA,GAAA;AACA;AACA;;AACA,MAAA,UAAA,CAAA,QAAA,GAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,EAAA;AACA,MAAA,UAAA,CAAA,SAAA,GAAA,KAAA,CAAA,QAAA,CAAA,QAAA,CAAA,GAAA,EAAA;AACA,aAAA,UAAA;AACA,KA/KA;;AAgLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAA,wBAvLA,oCAuLA,OAvLA,EAuLA;AACA,UAAA,CAAA,OAAA,IAAA,CAAA,KAAA,KAAA,EAAA,OAAA,OAAA;AACA,UAAA,MAAA,GAAA,EAAA;AACA,UAAA,KAAA,GAAA,CAAA,KAAA,KAAA,CAAA;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,UAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,MAAA,CAAA,WAAA,CAAA;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,WAAA,CAAA,EAAA,KAAA,GAAA,KAAA,CAAA,MAAA,CAAA,YAAA,CAAA;;AALA,iDAMA,OANA;AAAA;;AAAA;AAMA,4DAAA;AAAA,cAAA,CAAA;;AAAA,sDACA,CAAA,CAAA,KADA;AAAA;;AAAA;AACA,mEAAA;AAAA,kBAAA,CAAA;;AACA,kBAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAAA,EAAA;AACA,gBAAA,MAAA,CAAA,IAAA,CAAA,CAAA;AACA;AACA;AACA;AANA;AAAA;AAAA;AAAA;AAAA;AAOA;AAbA;AAAA;AAAA;AAAA;AAAA;;AAcA,aAAA,MAAA;AACA;AAtMA;AA3GA,CAAA","sourcesContent":["// Code based on from https://github.com/olefirenko/vue-google-autocomplete\n\n<template>\n  <o-text-field\n    ref=\"autocomplete\"\n    type=\"text\"\n    :class=\"classname\"\n    :id=\"id\"\n    :placeholder=\"placeholder\"\n    :disabled=\"disabled\"\n    v-model=\"autocompleteText\"\n    @focus=\"onFocus()\"\n    @blur=\"onBlur()\"\n    @change=\"onChange\"\n    @keypress=\"onKeyPress\"\n    @keyup=\"onKeyUp\"\n    @onChange=\"onChange\"\n    v-bind=\"{...$props, ...$attrs}\"\n  />\n</template>\n\n<script>\nimport OTextField from '@/components/molecules/OTextField.vue'\n/* global google */\nconst ADDRESS_COMPONENTS = {\n  subpremise: 'short_name',\n  street_number: 'short_name',\n  route: 'long_name',\n  locality: 'long_name',\n  administrative_area_level_1: 'short_name',\n  administrative_area_level_2: 'long_name',\n  country: 'long_name',\n  postal_code: 'short_name'\n}\nconst CITIES_TYPE = ['locality', 'administrative_area_level_3']\nconst REGIONS_TYPE = [\n  'locality',\n  'sublocality',\n  'postal_code',\n  'country',\n  'administrative_area_level_1',\n  'administrative_area_level_2'\n]\n/*\n      By default, we're only including basic place data because requesting these\n      fields place data is not additionally charged by Google. Please refer to:\n      https://developers.google.com/maps/billing/understanding-cost-of-use#basic-data\n    */\nconst BASIC_DATA_FIELDS = [\n  'address_components',\n  'adr_address',\n  'alt_id',\n  'formatted_address',\n  'geometry',\n  'icon',\n  'id',\n  'name',\n  'business_status',\n  'photo',\n  'place_id',\n  'scope',\n  'type',\n  'url',\n  'vicinity'\n]\nexport default {\n  components: { OTextField },\n  name: 'VueGoogleAutocomplete',\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    classname: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: 'Start typing'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    types: {\n      type: String,\n      default: 'address'\n    },\n    fields: {\n      type: Array,\n      default: function () {\n        return BASIC_DATA_FIELDS\n      }\n    },\n    country: {\n      type: [String, Array],\n      default: null\n    },\n    enableGeolocation: {\n      type: Boolean,\n      default: false\n    },\n    geolocationOptions: {\n      type: Object,\n      default: null\n    }\n  },\n  data () {\n    return {\n      /**\n       * The Autocomplete object.\n       *\n       * @type {Autocomplete}\n       * @link https://developers.google.com/maps/documentation/javascript/reference#Autocomplete\n       */\n      autocomplete: null,\n      /**\n       * Autocomplete input text\n       * @type {String}\n       */\n      autocompleteText: '',\n      geolocation: {\n        /**\n         * Google Geocoder Objet\n         * @type {Geocoder}\n         * @link https://developers.google.com/maps/documentation/javascript/reference#Geocoder\n         */\n        geocoder: null,\n        /**\n         * Filled after geolocate result\n         * @type {Coordinates}\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/Coordinates\n         */\n        loc: null,\n        /**\n         * Filled after geolocate result\n         * @type {Position}\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/Position\n         */\n        position: null\n      }\n    }\n  },\n  watch: {\n    autocompleteText: function (newVal, oldVal) {\n      this.$emit('inputChange', { newVal, oldVal }, this.id)\n    },\n    country: function (newVal, oldVal) {\n      this.autocomplete.setComponentRestrictions({\n        country: this.country === null ? [] : this.country\n      })\n    }\n  },\n  mounted: function () {\n    const options = {}\n    if (this.types) {\n      options.types = [this.types]\n    }\n    if (this.country) {\n      options.componentRestrictions = {\n        country: this.country\n      }\n    }\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById(this.id),\n      options\n    )\n    this.autocomplete.setFields(this.fields)\n    this.autocomplete.addListener('place_changed', this.onPlaceChanged)\n  },\n  methods: {\n    /**\n     * When a place changed\n     */\n    onPlaceChanged () {\n      const place = this.autocomplete.getPlace()\n      if (!place.geometry) {\n        // User entered the name of a Place that was not suggested and\n        // pressed the Enter key, or the Place Details request failed.\n        this.$emit('no-results-found', place, this.id)\n        return\n      }\n      if (place.address_components !== undefined) {\n        // return returnData object and PlaceResult object\n        this.$emit('placechanged', this.formatResult(place), place, this.id)\n        // update autocompleteText then emit change event\n        this.autocompleteText = document.getElementById(this.id).value\n        this.onChange()\n      }\n    },\n    /**\n     * When the input gets focus\n     */\n    onFocus () {\n      this.biasAutocompleteLocation()\n      this.$emit('focus')\n    },\n    /**\n     * When the input loses focus\n     */\n    onBlur () {\n      this.$emit('blur')\n    },\n    /**\n     * When the input got changed\n     */\n    onChange () {\n      this.$emit('change', document.getElementById(this.id).value)\n    },\n    /**\n     * When a key gets pressed\n     * @param  {Event} event A keypress event\n     */\n    onKeyPress (event) {\n      this.$emit('keypress', event)\n    },\n    /**\n     * When a keyup occurs\n     * @param  {Event} event A keyup event\n     */\n    onKeyUp (event) {\n      this.$emit('keyup', event)\n    },\n    /**\n     * Clear the input\n     */\n    clear () {\n      this.autocompleteText = ''\n    },\n    /**\n     * Focus the input\n     */\n    focus () {\n      this.$refs.autocomplete.focus()\n    },\n    /**\n     * Blur the input\n     */\n    blur () {\n      this.$refs.autocomplete.blur()\n    },\n    /**\n     * Update the value of the input\n     * @param  {String} value\n     */\n    update (value) {\n      this.autocompleteText = value\n    },\n    /**\n     * Update the coordinates of the input\n     * @param  {Coordinates} value\n     */\n    updateCoordinates (value) {\n      if (!value && !(value.lat || value.lng)) return\n      if (!this.geolocation.geocoder) {\n        this.geolocation.geocoder = new google.maps.Geocoder()\n      }\n      this.geolocation.geocoder.geocode(\n        { location: value },\n        (results, status) => {\n          if (status === 'OK') {\n            results = this.filterGeocodeResultTypes(results)\n            if (results[0]) {\n              this.$emit(\n                'placechanged',\n                this.formatResult(results[0]),\n                results[0],\n                this.id\n              )\n              this.update(results[0].formatted_address)\n            } else {\n              this.$emit('error', 'no result for provided coordinates')\n            }\n          } else {\n            this.$emit('error', 'error getting address from coords')\n          }\n        }\n      )\n    },\n    /**\n     * Update location based on navigator geolocation\n     */\n    geolocate () {\n      this.updateGeolocation((geolocation, position) => {\n        this.updateCoordinates(geolocation)\n      })\n    },\n    /**\n     * Update internal location from navigator geolocation\n     * @param  {Function} (geolocation, position)\n     */\n    updateGeolocation (callback = null) {\n      if (navigator.geolocation) {\n        const options = {}\n        if (this.geolocationOptions) {\n          Object.assign(options, this.geolocationOptions)\n        }\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const geolocation = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n            this.geolocation.loc = geolocation\n            this.geolocation.position = position\n            if (callback) callback(geolocation, position)\n          },\n          (err) => {\n            this.$emit('error', 'Cannot get Coordinates from navigator', err)\n          },\n          options\n        )\n      }\n    },\n    // Bias the autocomplete object to the user's geographical location,\n    // as supplied by the browser's 'navigator.geolocation' object.\n    biasAutocompleteLocation () {\n      if (this.enableGeolocation) {\n        this.updateGeolocation((geolocation, position) => {\n          const circle = new google.maps.Circle({\n            center: geolocation,\n            radius: position.coords.accuracy\n          })\n          this.autocomplete.setBounds(circle.getBounds())\n        })\n      }\n    },\n    /**\n     * Format result from Geo google APIs\n     * @param place\n     * @returns {{formatted output}}\n     */\n    formatResult (place) {\n      const returnData = {}\n      for (let i = 0; i < place.address_components.length; i++) {\n        const addressType = place.address_components[i].types[0]\n        if (ADDRESS_COMPONENTS[addressType]) {\n          const val =\n            place.address_components[i][ADDRESS_COMPONENTS[addressType]]\n          returnData[addressType] = val\n        }\n      }\n      returnData.latitude = place.geometry.location.lat()\n      returnData.longitude = place.geometry.location.lng()\n      return returnData\n    },\n    /**\n     * Extract configured types out of raw result as\n     * Geocode API does not allow to do it\n     * @param results\n     * @returns {GeocoderResult}\n     * @link https://developers.google.com/maps/documentation/javascript/reference#GeocoderResult\n     */\n    filterGeocodeResultTypes (results) {\n      if (!results || !this.types) return results\n      const output = []\n      let types = [this.types]\n      if (types.includes('(cities)')) types = types.concat(CITIES_TYPE)\n      if (types.includes('(regions)')) types = types.concat(REGIONS_TYPE)\n      for (const r of results) {\n        for (const t of r.types) {\n          if (types.includes(t)) {\n            output.push(r)\n            break\n          }\n        }\n      }\n      return output\n    }\n  }\n}\n</script>\n"],"sourceRoot":"src/components/atoms"}]}