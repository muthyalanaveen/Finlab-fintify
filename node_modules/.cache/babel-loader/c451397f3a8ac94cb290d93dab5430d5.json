{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/store/modules/returns/actions.js","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/store/modules/returns/actions.js","mtime":1658934857291},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1649977087118}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/store/modules/returns/actions.js"],"names":["googleMapsService","toRegularTime","isStoreWithinDistance","getLookupKeys","dayOfWeekAsString","store","validStoreName","checkMapsPolicy","CONSTANTS","formattedTime","hours","minutes","parseInt","sleep","milliseconds","Promise","resolve","setTimeout","GOOGLE_MAP_API_CACHE","GOOGLE_MAP_API_PID_CACHE","GOOGLE_MAP_API_DIST_CACHE","getWeeklyRange","place","formattedWeeklyRange","dateRange","timeRange","weeklyRange","opening_hours","periods","reduce","acc","day","open","start","end","startHour","startMinute","close","endHour","endMinute","slice","dayIndex","getFormattedStoreTime","closingHours","openingHours","openingMinutes","closingMinutes","currentDay","Date","getDay","currentTime","getHours","getMinutes","todaysPeriodArr","filter","reqdDay","length","count","dayPeriodArr","Math","abs","index","closingTime","openingTime","fetchAddressInfo","commit","shippingAddress","returnMethods","isReturnMethodCommited","updatedMethods","all","map","method","type","distanceThreshold","RETURN_METHODS","MAIL_BACK","push","name","customer_facing_carrier","zip_code","substring","street1","state","zipCode","city","lookupKey","keys","Object","rMethods","key","getPlaces","places","validPlaces","operationalStores","businessStatus","business_status","result","placeId","place_id","getDetails","getDistance","formatted_address","distance","formattedPhoneNumber","formatted_phone_number","formattedAddress","isOpen","weekday_text","todayClosingTime","todayOpeningTime","console","error","fetchNearbyCarriers","carrier","results","carriers","icon","sort","a","b","split","dispatch"],"mappings":"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","sourcesContent":["import googleMapsService from '@/common/googleMaps.service'\nimport { toRegularTime, isStoreWithinDistance, getLookupKeys, dayOfWeekAsString } from '@/utils'\nimport store from '@/store'\nimport { validStoreName } from '@/controllers/ReturnMethodsController.js'\nimport { checkMapsPolicy } from '@/controllers/MapController.js'\nimport { CONSTANTS } from '@/constants/index.js'\n\n// in HHMM format\nconst formattedTime = (hours, minutes) => {\n  return parseInt(`${hours}${minutes < 10 ? '0' + minutes : minutes}`)\n}\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\nconst GOOGLE_MAP_API_CACHE = {}\nconst GOOGLE_MAP_API_PID_CACHE = {}\nconst GOOGLE_MAP_API_DIST_CACHE = {}\n\nconst getWeeklyRange = (place) => {\n  const formattedWeeklyRange = { dateRange: '', timeRange: '' }\n\n  const weeklyRange = place?.opening_hours?.periods?.reduce((acc, day) => {\n    // if earliest found open day, set as start\n    if (day?.open?.day <= acc?.dateRange?.start) {\n      acc.dateRange.start = day?.open?.day\n    }\n    // if latest found open day, set as end\n    if (day?.open?.day >= acc?.dateRange?.end) {\n      acc.dateRange.end = day?.open?.day\n    }\n    // check if current day open is later than stored\n    if (day?.open?.hours >= acc?.timeRange?.startHour) {\n      if (day?.open?.minutes >= acc?.timeRange?.startMinute) {\n        acc.timeRange.startMinute = day?.open?.minutes\n      }\n      acc.timeRange.startHour = day?.open?.hours\n    }\n    // check if current day close is earlier than stored\n    if (day?.close?.hours <= acc?.timeRange?.endHour || !acc?.timeRange?.endHour) {\n      if (day?.close?.minutes <= acc?.timeRange?.endMinute || !acc?.timeRange?.endMinute) {\n        acc.timeRange.endMinute = day?.open?.minutes\n      }\n      acc.timeRange.endHour = day?.close?.hours\n    }\n    return acc\n  }, { dateRange: { start: '', end: '' }, timeRange: { startHour: '', startMinute: '', endHour: '', endMinute: '' } })\n\n  // reformat for human-readable\n  formattedWeeklyRange.dateRange = `${dayOfWeekAsString([weeklyRange?.dateRange?.start === 0 ? 1 : weeklyRange?.dateRange?.start]).slice(0, 3)} - ${dayOfWeekAsString([weeklyRange?.dateRange?.end]).slice(0, 3)}`\n\n  formattedWeeklyRange.timeRange = `${toRegularTime({ dayIndex: '', hours: weeklyRange?.timeRange?.startHour, minutes: weeklyRange?.timeRange?.startMinute })}\n  - ${toRegularTime({ hours: weeklyRange?.timeRange?.endHour, minutes: weeklyRange?.timeRange?.endMinute || 0 })}`\n\n  return formattedWeeklyRange\n}\n\nconst getFormattedStoreTime = (place) => {\n  let closingHours = null\n  let openingHours = null\n  let openingMinutes = null\n  let closingMinutes = null\n  let dayIndex = ''\n\n  const currentDay = new Date().getDay()\n  const currentTime = formattedTime(new Date().getHours(), new Date().getMinutes())\n  const todaysPeriodArr = place.opening_hours?.periods?.filter(\n    (reqdDay) => reqdDay?.close?.day === currentDay\n  )\n  // todaysPeriod array can be of any length\n\n  if (todaysPeriodArr) {\n    if (!todaysPeriodArr.length) { // holiday\n      for (let day = (currentDay + 1) % 7, count = 0; count < 6; day = (day + 1) % 7, count++) {\n        const dayPeriodArr = place.opening_hours?.periods?.filter(\n          (reqdDay) => reqdDay?.close?.day === day\n        )\n        if (!dayPeriodArr.length) {\n          continue\n        } else {\n          dayIndex = Math.abs(day - currentDay) > 1 ? day : '' // show day of the week only when its not the next day\n          openingHours = dayPeriodArr[0]?.open?.hours\n          openingMinutes = dayPeriodArr[0]?.open?.minutes\n          break\n        }\n      }\n    } else if (todaysPeriodArr.length === 1) {\n    // only one closing and opening time for a day\n      closingHours = todaysPeriodArr[0]?.close?.hours\n      closingMinutes = todaysPeriodArr[0]?.close?.minutes\n      openingHours = todaysPeriodArr[0]?.open?.hours\n      openingMinutes = todaysPeriodArr[0]?.open?.minutes\n    } else {\n    // store open in breaks in a day\n      for (let index = 0; index < todaysPeriodArr.length; index++) {\n        if (currentTime < formattedTime(todaysPeriodArr[index]?.open?.hours, todaysPeriodArr[index]?.open?.minutes\n        ) // closed: before store opening\n        ) {\n          openingHours = todaysPeriodArr[index]?.open?.hours\n          openingMinutes = todaysPeriodArr[index]?.open?.minutes\n          closingHours = todaysPeriodArr[index]?.close?.hours\n          closingMinutes = todaysPeriodArr[index]?.close?.minutes\n          break\n        } else if (currentTime >= formattedTime(todaysPeriodArr[index]?.open?.hours, todaysPeriodArr[index]?.open?.minutes) && currentTime < formattedTime(todaysPeriodArr[index]?.close?.hours, todaysPeriodArr[index]?.close?.minutes)) { // store is open\n          closingHours = todaysPeriodArr[index]?.close?.hours\n          closingMinutes = todaysPeriodArr[index]?.close?.minutes\n          openingHours = todaysPeriodArr[index]?.open?.hours\n          openingMinutes = todaysPeriodArr[index]?.open?.minutes\n          break\n        } else {\n        // closed: after store closing. We need next active day's openingHours\n          for (let day = (currentDay + 1) % 7, count = 0; count < 6; day = (day + 1) % 7, count++) {\n            const dayPeriodArr = place.opening_hours?.periods?.filter(\n              (reqdDay) => reqdDay?.close?.day === day\n            )\n            if (!dayPeriodArr.length) {\n              continue\n            } else {\n              dayIndex = Math.abs(day - currentDay) > 1 ? day : ''\n              openingHours = dayPeriodArr[0]?.open?.hours\n              openingMinutes = dayPeriodArr[0]?.open?.minutes\n              closingHours = todaysPeriodArr[0]?.close?.hours\n              closingMinutes = todaysPeriodArr[0]?.close?.minutes\n              break\n            }\n          }\n        }\n      }\n    }\n  }\n  return {\n    closingTime: toRegularTime({ dayIndex, hours: closingHours, minutes: closingMinutes }) || 'N/A',\n    openingTime: toRegularTime({ dayIndex, hours: openingHours, minutes: openingMinutes }) || 'N/A'\n  }\n}\n\nexport default {\n  async fetchAddressInfo ({ commit }, { shippingAddress, returnMethods }) {\n    var isReturnMethodCommited = false\n    const updatedMethods = []\n    // commit('setLoading', true)\n    try {\n      await Promise.all(\n        returnMethods.map(async (method) => {\n          const { type, distanceThreshold } = method\n          if (type === CONSTANTS.RETURN_METHODS.MAIL_BACK) { // fault tolerance - always surface mailback options\n            updatedMethods.push({\n              ...method\n            })\n            return\n          }\n          const name = method?.customer_facing_carrier\n          if (shippingAddress?.zip_code?.length > 5) {\n            shippingAddress.zip_code = shippingAddress?.zip_code?.substring(0, 5)\n          }\n          const { street1, state, zip_code: zipCode, city } = shippingAddress\n          const lookupKey = `${state}_${zipCode}_${city}_${name}_${type}_info`\n\n          if (GOOGLE_MAP_API_CACHE[lookupKey]) {\n            const keys = getLookupKeys(Object.keys(GOOGLE_MAP_API_CACHE), lookupKey)\n            var rMethods = []\n            keys.map(key => { if (GOOGLE_MAP_API_CACHE[key] && GOOGLE_MAP_API_CACHE[key].length > 0) { rMethods.push(GOOGLE_MAP_API_CACHE[key][0]) } })\n            commit('updateMethods', rMethods)\n            isReturnMethodCommited = true\n            return GOOGLE_MAP_API_CACHE[lookupKey]\n          }\n\n          // STEP 1: Get places for the specified zipcode, city and state\n          // STEP 2: Ensure the place name has specified names (storeNames) as mentioned in the policy\n          // STEP 3: Filter only OPERATIONAL stores. PERMANENTLY_CLOSED stores are eliminated\n          // STEP 4: Pick up the first operational, valid store (To be changed)\n\n          let places = await googleMapsService.getPlaces(shippingAddress, name, type)\n          if (places.length === 0) {\n            places = await googleMapsService.getPlaces(shippingAddress, name, type, true)\n            if (places.length === 0) {\n              return {\n                ...method\n              }\n            }\n          }\n\n          let validPlaces = places.filter((place) => validStoreName(place.name, type))\n          if (validPlaces.length === 0) {\n            places = await googleMapsService.getPlaces(shippingAddress, name, type, true)\n            if (places.length === 0) {\n              return {\n                ...method\n              }\n            }\n            validPlaces = places.filter((place) => validStoreName(place.name, type))\n            if (validPlaces.length === 0) {\n              return {\n                ...method\n              }\n            }\n          }\n\n          const operationalStores = validPlaces.filter(\n            ({ business_status: businessStatus }) =>\n              !businessStatus ? true : businessStatus === 'OPERATIONAL'\n          )\n          if (operationalStores.length === 0) {\n            return {\n              ...method\n            }\n          }\n\n          GOOGLE_MAP_API_CACHE[lookupKey] = []\n\n          for (let index = 0; index < operationalStores.length; index++) {\n            const result = operationalStores[index]\n\n            const { place_id: placeId } = result\n\n            const place = await googleMapsService.getDetails(placeId)\n\n            // TODO: If distance is greater than threshold, then call it again by not specifying the street1\n            const distance = await googleMapsService.getDistance(\n            `${street1}, ${city}, ${state} ${zipCode}`,\n            place.formatted_address\n            )\n\n            if (!isStoreWithinDistance(distance?.distance, distanceThreshold)) {\n              continue\n            } else {\n              GOOGLE_MAP_API_CACHE[lookupKey].push({\n                ...method,\n                ...distance,\n                formattedPhoneNumber: place?.formatted_phone_number,\n                formattedAddress: place?.formatted_address,\n                openingHours: {\n                  isOpen: place?.opening_hours?.isOpen(),\n                  weekday_text: place?.opening_hours?.weekday_text,\n                  periods: place?.opening_hours?.periods,\n                  todayClosingTime: getFormattedStoreTime(place).closingTime,\n                  todayOpeningTime: getFormattedStoreTime(place).openingTime\n                }\n              })\n              updatedMethods.push({\n                ...method,\n                ...distance,\n                formattedPhoneNumber: place?.formatted_phone_number,\n                formattedAddress: place?.formatted_address,\n                openingHours: {\n                  isOpen: place?.opening_hours?.isOpen(),\n                  weekday_text: place?.opening_hours?.weekday_text,\n                  periods: place?.opening_hours?.periods,\n                  todayClosingTime: getFormattedStoreTime(place).closingTime,\n                  todayOpeningTime: getFormattedStoreTime(place).openingTime\n                }\n              })\n              break\n            }\n          }\n        })\n      )\n    } catch (error) {\n      console.error('Error fetching address Info', { error })\n    }\n\n    if (!isReturnMethodCommited) {\n      commit('updateMethods', updatedMethods)\n    }\n    // commit('setLoading', false)\n  },\n  async fetchNearbyCarriers ({ commit }, { carrier, shippingAddress }) {\n    commit('setLoading', true)\n    const { type, distanceThreshold } = carrier\n    const name = carrier?.customer_facing_carrier\n    const { street1, state, zip_code: zipCode, city } = shippingAddress\n    // const lookupKey = `${state}_${zipCode}_${city}_${name}_${type}_nearby`\n    try {\n      // if (GOOGLE_MAP_API_CACHE[lookupKey]) {\n      //   commit('setNearbyCarriers', GOOGLE_MAP_API_CACHE[lookupKey])\n      //   commit('setLoading', false)\n      //   return\n      // }\n      const places = await googleMapsService.getPlaces(shippingAddress, name, type)\n\n      let results = places\n        .filter(\n          ({ business_status: businessStatus }) =>\n            !businessStatus ? true : businessStatus === 'OPERATIONAL'\n        )\n      // Only calculate distance for a max of ten results\n      if (results.length > 10) {\n        results = results.slice(0, 10)\n      }\n\n      const carriers = []\n      for await (const result of results) {\n        const { place_id: placeId } = result\n\n        var place = GOOGLE_MAP_API_PID_CACHE[placeId]\n        var distance = GOOGLE_MAP_API_DIST_CACHE[placeId]\n\n        if (!place || !distance) {\n          await sleep(200)\n          place = await googleMapsService.getDetails(placeId)\n          GOOGLE_MAP_API_PID_CACHE[placeId] = place\n\n          await sleep(200)\n          distance = await googleMapsService.getDistance(\n            `${street1}, ${city}, ${state} ${zipCode}`,\n            place.formatted_address\n          )\n\n          GOOGLE_MAP_API_DIST_CACHE[placeId] = distance\n        }\n\n        if (isStoreWithinDistance(distance.distance, distanceThreshold) && validStoreName(place.name, type)) {\n          carriers.push({\n            ...carrier,\n            ...distance,\n            name: place.name,\n            formattedPhoneNumber: place?.formatted_phone_number,\n            formattedAddress: place?.formatted_address,\n            icon: result.icon,\n            openingHours: {\n              isOpen: place?.opening_hours?.isOpen(),\n              weeklyRange: checkMapsPolicy() ? getWeeklyRange(place) : '',\n              weekday_text: place?.opening_hours?.weekday_text,\n              periods: place?.opening_hours?.periods,\n              todayClosingTime: getFormattedStoreTime(place).closingTime,\n              todayOpeningTime: getFormattedStoreTime(place).openingTime\n            }\n          })\n        }\n      }\n\n      carriers.sort(\n        (a, b) => +a.distance.split(' ')[0] - +b.distance.split(' ')[0]\n      ).slice(0, 3)\n\n      // GOOGLE_MAP_API_CACHE[lookupKey] = carriers\n\n      commit('setNearbyCarriers', carriers)\n      commit('setLoading', false)\n    } catch (error) {\n      console.error('Error fetching nearby locations', { error })\n      // delete GOOGLE_MAP_API_CACHE[lookupKey]\n      await sleep(5000)\n      store.dispatch('returns/fetchNearbyCarriers', {\n        carrier: carrier,\n        shippingAddress: shippingAddress\n      })\n    }\n  }\n}\n"]}]}