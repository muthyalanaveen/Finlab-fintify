{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/map.js","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/map.js","mtime":1651253223417},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1649977087118}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/map.js"],"names":["googleMapsService","store","CONSTANTS","returnShippingOptions","delay","getNearbyStores","shippingOptions","shippingAddress","getters","expressReturns","getExpressReturns","Error","dispatch","carrier","find","option","type","RETURN_METHODS","EXPRESS_RETURNS","getShippingAddress","getLatLng","latLng","marker","lat","lng","position","address","checkForExpressDropoffOptions","returnMethods","policyReturnMethods","expressReturnsEnabled","policy","policy_return_methods","method","feature_flags","map_enabled","findAllExpressReturnLocations","nearbyCarriers","placesToCoords","length","console","error","getDropoffLocations","gettingCoords","places","markers","i","formattedAddress","push","icon","distance","UNKNOWN","closingTime","openingHours","todayClosingTime"],"mappings":"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","sourcesContent":["/* eslint-disable promise/param-names */\nimport googleMapsService from '@/common/googleMaps.service'\nimport store from '../store'\nimport { CONSTANTS } from '@/constants/index.js'\nimport { returnShippingOptions, delay } from '@/utils'\n\nexport async function getNearbyStores (shippingOptions) {\n  const shippingAddress = store.getters['returns/getAddress']\n  const expressReturns = getExpressReturns(shippingOptions)\n\n  if (!expressReturns) {\n    throw new Error('No Express Returns Available')\n  }\n\n  await store.dispatch('returns/fetchNearbyCarriers', {\n    carrier: expressReturns,\n    shippingAddress: shippingAddress\n  }) // puts nearby carriers in the store\n}\n\n// returns empty string if no express returns\nexport function getExpressReturns (shippingOptions) {\n  return shippingOptions.find(\n    (option) =>\n      option.type === CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n  )\n}\n\nexport async function getShippingAddress () {\n  const shippingAddress = store.getters['returns/formattedShippingAddress']\n  const latLng = await googleMapsService.getLatLng(shippingAddress)\n\n  const marker = {\n    lat: latLng.lat,\n    lng: latLng.lng\n  }\n\n  return { position: marker, address: shippingAddress }\n}\n\nexport async function checkForExpressDropoffOptions (returnMethods, policyReturnMethods) {\n  let expressReturnsEnabled = false\n\n  try {\n    const policy = store.getters['returns/policies']\n\n    expressReturnsEnabled = policy?.policy_return_methods?.find(\n      (method) =>\n        method.type === CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n    )\n\n    if (policy.feature_flags?.map_enabled && expressReturnsEnabled) {\n      const nearbyCarriers = await findAllExpressReturnLocations(returnMethods, policyReturnMethods, false)\n      expressReturnsEnabled = nearbyCarriers.placesToCoords.length > 0\n    }\n  } catch (e) {\n    console.error(e)\n  }\n\n  return expressReturnsEnabled\n}\n\n/**\n *\n * @param {*} gettingCoords\n * @returns placesToCoords\n */\n\nexport async function getDropoffLocations (gettingCoords) {\n  const places = store.getters['returns/getNearbyCarriers']\n\n  // if only checking if nearby carriers exist, dont get the coords\n  if (!gettingCoords) {\n    return places\n  }\n\n  const markers = []\n\n  for (var i = 0; i < places.length; i++) {\n    await delay(500)\n    const latLng = await googleMapsService.getLatLng(places[i].formattedAddress)\n    const marker = {\n      lat: latLng.lat,\n      lng: latLng.lng\n    }\n    markers.push({ icon: places[i].icon, position: marker, address: places[i].formattedAddress, distance: places[i].distance !== null ? places[i].distance : CONSTANTS.UNKNOWN, closingTime: places[i].openingHours.todayClosingTime !== null ? places[i].openingHours.todayClosingTime : CONSTANTS.UNKNOWN })\n  }\n\n  return markers\n}\n\nexport async function findAllExpressReturnLocations (returnMethods, policyReturnMethods, gettingCoords) {\n  let shippingAddress\n\n  if (gettingCoords) { // dont need shipping address coords for inital map check\n    shippingAddress = await getShippingAddress()\n  }\n\n  let placesToCoords = []\n  const shippingOptions = returnShippingOptions(returnMethods, policyReturnMethods)\n\n  if (shippingOptions && shippingOptions.length > 0 && getExpressReturns(shippingOptions)) { // correct shipping options available\n    await getNearbyStores(shippingOptions)\n    placesToCoords = await getDropoffLocations(gettingCoords)\n  }\n\n  return { shippingAddress: shippingAddress, placesToCoords: placesToCoords }\n}\n"]}]}