{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/Asset/fintify/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/Asset/fintify/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/naveenmuthyala/Documents/Projects/Asset/fintify/src/common/googleMaps.service.js","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/fintify/src/common/googleMaps.service.js","mtime":1665512616642},{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/fintify/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/fintify/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/fintify/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1649977087118}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/naveenmuthyala/Documents/Projects/Asset/fintify/src/common/googleMaps.service.js"],"names":["CONSTANTS","CARRIERS","placeService","google","maps","places","PlacesService","document","createElement","GOOGLE_MAP_API_CACHE","distanceService","DistanceMatrixService","geocoder","Geocoder","googleMapsService","getDistance","origin","destination","Promise","resolve","reject","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","IMPERIAL","response","status","originAddresses","destinationAddresses","rows","originAddress","destinationAddress","length","distance","duration","elements","text","getDetails","placeId","fields","place","getLatLng","shippingAddress","latLng","geocode","address","results","location","geometry","lat","parseFloat","toString","substr","lng","console","error","getPlaces","name","type","removeStore","state","zipCode","zip_code","city","searchTerm","toLowerCase","UPS","USPS","textSearch","query"],"mappings":"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","sourcesContent":["/* global google */\n\nimport { CONSTANTS } from '@/constants'\n\nconst { CARRIERS } = CONSTANTS\nconst placeService = new google.maps.places.PlacesService(\n  document.createElement('div')\n)\nconst GOOGLE_MAP_API_CACHE = {}\nconst distanceService = new google.maps.DistanceMatrixService()\nconst geocoder = new google.maps.Geocoder()\n\nconst googleMapsService = {\n  async getDistance (origin, destination) {\n    return new Promise((resolve, reject) => {\n      distanceService.getDistanceMatrix(\n        {\n          origins: [origin],\n          destinations: [destination],\n          travelMode: 'DRIVING',\n          unitSystem: google.maps.UnitSystem.IMPERIAL\n        },\n        (response, status) => {\n          if (status === 'OK') {\n            const { originAddresses, destinationAddresses, rows } = response\n\n            var originAddress = origin\n            var destinationAddress = destination\n\n            if (\n              originAddresses?.length > 0 &&\n              destinationAddresses?.length > 0\n            ) {\n              originAddress = originAddresses[0]\n              destinationAddress = destinationAddresses[0]\n            }\n\n            var distance = '1 mi'\n            var duration = '2 mins'\n\n            if (\n              rows?.length > 0 &&\n              rows[0]?.elements?.length > 0 &&\n              rows[0]?.elements[0]?.distance &&\n              rows[0]?.elements[0]?.duration\n            ) {\n              distance = rows[0].elements[0].distance.text\n              duration = rows[0].elements[0].duration.text\n            }\n\n            resolve({\n              originAddress,\n              destinationAddress,\n              distance,\n              duration\n            })\n          } else {\n            reject(status)\n          }\n        }\n      )\n    })\n  },\n\n  async getDetails (placeId) {\n    return new Promise((resolve, reject) => {\n      placeService.getDetails(\n        {\n          placeId,\n          fields: [\n            'name',\n            'opening_hours',\n            'utc_offset_minutes',\n            'formatted_phone_number',\n            'formatted_address'\n          ]\n        },\n        async function (place, status) {\n          if (status === 'OK') {\n            resolve(place)\n          } else {\n            reject(status)\n          }\n        }\n      )\n    })\n  },\n\n  async getLatLng (shippingAddress) {\n    let lat\n    let lng\n\n    var latLng = GOOGLE_MAP_API_CACHE[shippingAddress]\n\n    if (latLng) {\n      return latLng\n    }\n\n    await geocoder.geocode({ address: shippingAddress }, function (\n      results,\n      status\n    ) {\n      if (status === 'OK' && results.length > 0) {\n        const location = results[0].geometry.location\n        lat = parseFloat(\n          location\n            .lat()\n            .toString()\n            .substr(0, 12)\n        )\n        lng = parseFloat(\n          location\n            .lng()\n            .toString()\n            .substr(0, 12)\n        )\n        GOOGLE_MAP_API_CACHE[shippingAddress] = { lat: lat, lng: lng }\n      } else {\n        console.error(\n          'Geocode was not successful for the following reason: ' + status\n        )\n      }\n    })\n    return { lat: lat, lng: lng }\n  },\n\n  async getPlaces (shippingAddress, name, type, removeStore = false) {\n    const { state, zip_code: zipCode, city } = shippingAddress\n    let searchTerm = name\n\n    if (\n      !removeStore &&\n      (type === 'in-store' ||\n        name.toLowerCase() === CARRIERS.UPS ||\n        name.toLowerCase() === CARRIERS.USPS)\n    ) {\n      searchTerm = `${name} Store`\n    }\n    return new Promise((resolve, reject) => {\n      placeService.textSearch(\n        {\n          query: `\"${searchTerm}\" ${city} ${state} ${zipCode}`\n        },\n        async function (results, status) {\n          if (status === 'OK') {\n            resolve(results)\n          } else {\n            resolve([])\n          }\n        }\n      )\n    })\n  }\n}\n\nexport default googleMapsService\n"]}]}