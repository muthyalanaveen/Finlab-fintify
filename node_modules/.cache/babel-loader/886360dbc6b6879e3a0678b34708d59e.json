{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/MapController.js","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/MapController.js","mtime":1659492598909},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1649977087118}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/MapController.js"],"names":["googleMapsService","store","CONSTANTS","getDistanceValue","returnShippingOptions","getNearbyStores","shippingOptions","shippingAddress","getters","expressReturns","getExpressReturns","Error","dispatch","carrier","find","option","type","RETURN_METHODS","EXPRESS_RETURNS","getShippingAddress","getLatLng","latLng","marker","lat","lng","position","address","checkMapsPolicy","policy","feature_flags","map_enabled","checkForExpressDropoffOptions","returnMethods","policyReturnMethods","expressReturnsEnabled","policy_return_methods","method","findAllExpressReturnLocations","nearbyCarriers","placesToCoords","length","console","error","getDropoffLocations","gettingCoords","places","markers","i","formattedAddress","push","distance","UNKNOWN","closingTime","openingHours","todayClosingTime","returnMethodsWithinDistance","hasMap","potentialReturnMethods","filter","slice","sort","method1","method2","returnMethodRank","setSelectedReturnMethod","commit"],"mappings":"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","sourcesContent":["/* eslint-disable promise/param-names */\nimport googleMapsService from '@/common/googleMaps.service'\nimport store from '../store'\nimport { CONSTANTS } from '@/constants/index.js'\nimport { getDistanceValue } from '@/utils'\nimport { returnShippingOptions } from '@/controllers/ReturnMethodsController.js'\n\nexport async function getNearbyStores (shippingOptions) {\n  const shippingAddress = store.getters['returns/getAddress']\n  const expressReturns = getExpressReturns(shippingOptions)\n\n  if (!expressReturns) {\n    throw new Error('No Express Returns Available')\n  }\n\n  await store.dispatch('returns/fetchNearbyCarriers', {\n    carrier: expressReturns,\n    shippingAddress: shippingAddress\n  }) // puts nearby carriers in the store\n}\n\n// returns empty string if no express returns\nexport function getExpressReturns (shippingOptions) {\n  return shippingOptions.find(\n    (option) => option.type === CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n  )\n}\n\nexport async function getShippingAddress () {\n  const shippingAddress = store.getters['returns/formattedShippingAddress']\n  const latLng = await googleMapsService.getLatLng(shippingAddress)\n\n  const marker = {\n    lat: latLng.lat,\n    lng: latLng.lng\n  }\n\n  return { position: marker, address: shippingAddress }\n}\n\nexport function checkMapsPolicy () {\n  const policy = store.getters['returns/policies']\n  return policy.feature_flags?.map_enabled\n}\n\nexport async function checkForExpressDropoffOptions (\n  returnMethods,\n  policyReturnMethods\n) {\n  let expressReturnsEnabled = false\n\n  try {\n    const policy = store.getters['returns/policies']\n\n    expressReturnsEnabled = policy?.policy_return_methods?.find(\n      (method) => method.type === CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n    )\n\n    if (checkMapsPolicy() && expressReturnsEnabled) {\n      const nearbyCarriers = await findAllExpressReturnLocations(\n        returnMethods,\n        policyReturnMethods,\n        false // getting coords\n      )\n      expressReturnsEnabled = nearbyCarriers.placesToCoords.length > 0\n    } else {\n      expressReturnsEnabled = false\n    }\n  } catch (e) {\n    console.error(e)\n  }\n  return expressReturnsEnabled\n}\n\n/**\n *\n * @param {*} gettingCoords\n * @returns placesToCoords\n */\n\nexport async function getDropoffLocations (gettingCoords) {\n  const places = store.getters['returns/getNearbyCarriers']\n\n  // if only checking if nearby carriers exist, dont get the coords\n  if (!gettingCoords) {\n    return places\n  }\n  const markers = []\n\n  for (var i = 0; i < places.length; i++) {\n    const latLng = await googleMapsService.getLatLng(\n      places[i].formattedAddress\n    )\n    const marker = {\n      lat: latLng.lat,\n      lng: latLng.lng\n    }\n    markers.push({\n      carrier: places[i],\n      position: marker,\n      distance:\n        places[i].distance !== null ? places[i].distance : CONSTANTS.UNKNOWN,\n      closingTime:\n        places[i].openingHours.todayClosingTime !== null\n          ? places[i].openingHours.todayClosingTime\n          : CONSTANTS.UNKNOWN\n    })\n  }\n\n  return markers\n}\n\nexport async function findAllExpressReturnLocations (\n  returnMethods,\n  policyReturnMethods,\n  gettingCoords\n) {\n  let shippingAddress\n\n  if (gettingCoords) {\n    // dont need shipping address coords for inital map check\n    shippingAddress = await getShippingAddress()\n  }\n\n  let placesToCoords = []\n  const shippingOptions = returnShippingOptions(\n    returnMethods,\n    policyReturnMethods\n  )\n\n  if (\n    shippingOptions &&\n    shippingOptions.length > 0 &&\n    getExpressReturns(shippingOptions)\n  ) {\n    // correct shipping options available\n    await getNearbyStores(shippingOptions)\n    placesToCoords = await getDropoffLocations(gettingCoords)\n  }\n  return { shippingAddress: shippingAddress, placesToCoords: placesToCoords }\n}\n\nexport function returnMethodsWithinDistance (hasMap) {\n  let potentialReturnMethods = store.getters['returns/returnMethods']\n\n  if (hasMap) {\n    potentialReturnMethods = potentialReturnMethods.filter(\n      (method) => method.type !== CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n    )\n  }\n  return potentialReturnMethods\n    .slice()\n    .sort(\n      (method1, method2) =>\n        method1.returnMethodRank - method2.returnMethodRank ||\n        getDistanceValue(method1?.distance) -\n          getDistanceValue(method2?.distance)\n    )\n}\n\nexport function setSelectedReturnMethod (carrier) {\n  store.commit('returns/setSelectedReturnMethod', carrier)\n}\n"]}]}