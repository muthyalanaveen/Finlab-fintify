{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/store/modules/returns/actions.js","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/store/modules/returns/actions.js","mtime":1653330817100},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1649977087118}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/store/modules/returns/actions.js"],"names":["googleMapsService","toRegularTime","isStoreWithinDistance","getLookupKeys","dayOfWeekAsString","store","validStoreName","formattedTime","hours","minutes","parseInt","sleep","milliseconds","Promise","resolve","setTimeout","GOOGLE_MAP_API_CACHE","GOOGLE_MAP_API_PID_CACHE","GOOGLE_MAP_API_DIST_CACHE","getWeeklyRange","place","formattedWeeklyRange","dateRange","timeRange","weeklyRange","opening_hours","periods","reduce","acc","day","open","start","end","startHour","startMinute","close","endHour","endMinute","slice","dayIndex","getFormattedStoreTime","closingHours","openingHours","openingMinutes","closingMinutes","currentDay","Date","getDay","currentTime","getHours","getMinutes","todaysPeriodArr","filter","reqdDay","length","count","dayPeriodArr","Math","abs","index","closingTime","openingTime","fetchAddressInfo","commit","shippingAddress","returnMethods","isReturnMethodCommited","updatedMethods","all","map","method","type","distanceThreshold","name","customer_facing_carrier","zip_code","substring","street1","state","zipCode","city","lookupKey","keys","Object","rMethods","key","push","getPlaces","places","validPlaces","operationalStores","businessStatus","business_status","result","placeId","place_id","getDetails","getDistance","formatted_address","distance","formattedPhoneNumber","formatted_phone_number","formattedAddress","isOpen","weekday_text","todayClosingTime","todayOpeningTime","console","error","fetchNearbyCarriers","carrier","results","carriers","icon","sort","a","b","split","dispatch"],"mappings":"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","sourcesContent":["import googleMapsService from '@/common/googleMaps.service'\nimport { toRegularTime, isStoreWithinDistance, getLookupKeys, dayOfWeekAsString } from '@/utils'\nimport store from '@/store'\nimport { validStoreName } from '@/controllers/ReturnMethodsController.js'\n\n// in HHMM format\nconst formattedTime = (hours, minutes) => {\n  return parseInt(`${hours}${minutes < 10 ? '0' + minutes : minutes}`)\n}\n\nconst sleep = (milliseconds) => {\n  return new Promise(resolve => setTimeout(resolve, milliseconds))\n}\nconst GOOGLE_MAP_API_CACHE = {}\nconst GOOGLE_MAP_API_PID_CACHE = {}\nconst GOOGLE_MAP_API_DIST_CACHE = {}\n\nconst getWeeklyRange = (place) => {\n  const formattedWeeklyRange = { dateRange: '', timeRange: '' }\n\n  const weeklyRange = place?.opening_hours?.periods?.reduce((acc, day) => {\n    // if earliest found open day, set as start\n    if (day?.open?.day <= acc?.dateRange?.start) {\n      acc.dateRange.start = day.open.day\n    }\n    // if latest found open day, set as end\n    if (day?.open?.day >= acc?.dateRange?.end) {\n      acc.dateRange.end = day.open.day\n    }\n    // check if current day open is later than stored\n    if (day?.open?.hours >= acc?.timeRange?.startHour) {\n      if (day?.open?.minutes >= acc?.timeRange?.startMinute) {\n        acc.timeRange.startMinute = day.open.minutes\n      }\n      acc.timeRange.startHour = day.open.hours\n    }\n    // check if current day close is earlier than stored\n    if (day?.close?.hours <= acc?.timeRange?.endHour || !acc?.timeRange?.endHour) {\n      if (day?.close?.minutes <= acc?.timeRange?.endMinute || !acc?.timeRange?.endMinute) {\n        acc.timeRange.endMinute = day.open.minutes\n      }\n      acc.timeRange.endHour = day.close.hours\n    }\n    return acc\n  }, { dateRange: { start: '', end: '' }, timeRange: { startHour: '', startMinute: '', endHour: '', endMinute: '' } })\n\n  // reformat for human-readable\n  formattedWeeklyRange.dateRange = `${dayOfWeekAsString([weeklyRange?.dateRange?.start === 0 ? 1 : weeklyRange?.dateRange?.start]).slice(0, 3)} - ${dayOfWeekAsString([weeklyRange?.dateRange?.end]).slice(0, 3)}`\n\n  formattedWeeklyRange.timeRange = `${toRegularTime({ dayIndex: '', hours: weeklyRange?.timeRange?.startHour, minutes: weeklyRange?.timeRange?.startMinute })}\n  - ${toRegularTime({ hours: weeklyRange?.timeRange?.endHour, minutes: weeklyRange?.timeRange?.endMinute || 0 })}`\n\n  return formattedWeeklyRange\n}\n\nconst getFormattedStoreTime = (place) => {\n  let closingHours = null\n  let openingHours = null\n  let openingMinutes = null\n  let closingMinutes = null\n  let dayIndex = ''\n\n  const currentDay = new Date().getDay()\n  const currentTime = formattedTime(new Date().getHours(), new Date().getMinutes())\n  const todaysPeriodArr = place.opening_hours?.periods?.filter(\n    (reqdDay) => reqdDay?.close?.day === currentDay\n  )\n  // todaysPeriod array can be of any length\n\n  if (todaysPeriodArr) {\n    if (!todaysPeriodArr.length) { // holiday\n      for (let day = (currentDay + 1) % 7, count = 0; count < 6; day = (day + 1) % 7, count++) {\n        const dayPeriodArr = place.opening_hours?.periods?.filter(\n          (reqdDay) => reqdDay?.close?.day === day\n        )\n        if (!dayPeriodArr.length) {\n          continue\n        } else {\n          dayIndex = Math.abs(day - currentDay) > 1 ? day : '' // show day of the week only when its not the next day\n          openingHours = dayPeriodArr[0]?.open?.hours\n          openingMinutes = dayPeriodArr[0]?.open?.minutes\n          break\n        }\n      }\n    } else if (todaysPeriodArr.length === 1) {\n    // only one closing and opening time for a day\n      closingHours = todaysPeriodArr[0]?.close?.hours\n      closingMinutes = todaysPeriodArr[0]?.close?.minutes\n      openingHours = todaysPeriodArr[0]?.open?.hours\n      openingMinutes = todaysPeriodArr[0]?.open?.minutes\n    } else {\n    // store open in breaks in a day\n      for (let index = 0; index < todaysPeriodArr.length; index++) {\n        if (currentTime < formattedTime(todaysPeriodArr[index]?.open?.hours, todaysPeriodArr[index]?.open?.minutes\n        ) // closed: before store opening\n        ) {\n          openingHours = todaysPeriodArr[index]?.open?.hours\n          openingMinutes = todaysPeriodArr[index]?.open?.minutes\n          closingHours = todaysPeriodArr[index]?.close?.hours\n          closingMinutes = todaysPeriodArr[index]?.close?.minutes\n          break\n        } else if (currentTime >= formattedTime(todaysPeriodArr[index]?.open?.hours, todaysPeriodArr[index]?.open?.minutes) && currentTime < formattedTime(todaysPeriodArr[index]?.close?.hours, todaysPeriodArr[index]?.close?.minutes)) { // store is open\n          closingHours = todaysPeriodArr[index]?.close?.hours\n          closingMinutes = todaysPeriodArr[index]?.close?.minutes\n          openingHours = todaysPeriodArr[index]?.open?.hours\n          openingMinutes = todaysPeriodArr[index]?.open?.minutes\n          break\n        } else {\n        // closed: after store closing. We need next active day's openingHours\n          for (let day = (currentDay + 1) % 7, count = 0; count < 6; day = (day + 1) % 7, count++) {\n            const dayPeriodArr = place.opening_hours?.periods?.filter(\n              (reqdDay) => reqdDay?.close?.day === day\n            )\n            if (!dayPeriodArr.length) {\n              continue\n            } else {\n              dayIndex = Math.abs(day - currentDay) > 1 ? day : ''\n              openingHours = dayPeriodArr[0]?.open?.hours\n              openingMinutes = dayPeriodArr[0]?.open?.minutes\n              closingHours = todaysPeriodArr[0]?.close?.hours\n              closingMinutes = todaysPeriodArr[0]?.close?.minutes\n              break\n            }\n          }\n        }\n      }\n    }\n  }\n  return {\n    closingTime: toRegularTime({ dayIndex, hours: closingHours, minutes: closingMinutes }) || 'N/A',\n    openingTime: toRegularTime({ dayIndex, hours: openingHours, minutes: openingMinutes }) || 'N/A'\n  }\n}\n\nexport default {\n  async fetchAddressInfo ({ commit }, { shippingAddress, returnMethods }) {\n    var isReturnMethodCommited = false\n    const updatedMethods = []\n    // commit('setLoading', true)\n    try {\n      await Promise.all(\n        returnMethods.map(async (method) => {\n          const { type, distanceThreshold } = method\n          const name = method?.customer_facing_carrier\n          if (shippingAddress?.zip_code?.length > 5) {\n            shippingAddress.zip_code = shippingAddress?.zip_code?.substring(0, 5)\n          }\n          const { street1, state, zip_code: zipCode, city } = shippingAddress\n          const lookupKey = `${state}_${zipCode}_${city}_${name}_${type}_info`\n\n          if (GOOGLE_MAP_API_CACHE[lookupKey]) {\n            const keys = getLookupKeys(Object.keys(GOOGLE_MAP_API_CACHE), lookupKey)\n            var rMethods = []\n            keys.map(key => { if (GOOGLE_MAP_API_CACHE[key] && GOOGLE_MAP_API_CACHE[key].length > 0) { rMethods.push(GOOGLE_MAP_API_CACHE[key][0]) } })\n            commit('updateMethods', rMethods)\n            isReturnMethodCommited = true\n            return GOOGLE_MAP_API_CACHE[lookupKey]\n          }\n\n          // STEP 1: Get places for the specified zipcode, city and state\n          // STEP 2: Ensure the place name has specified names (storeNames) as mentioned in the policy\n          // STEP 3: Filter only OPERATIONAL stores. PERMANENTLY_CLOSED stores are eliminated\n          // STEP 4: Pick up the first operational, valid store (To be changed)\n\n          const places = await googleMapsService.getPlaces(shippingAddress, name, type)\n          if (places.length === 0) {\n            return {\n              ...method\n            }\n          }\n\n          const validPlaces = places.filter((place) => validStoreName(place.name, type))\n          if (validPlaces.length === 0) {\n            return {\n              ...method\n            }\n          }\n\n          const operationalStores = validPlaces.filter(\n            ({ business_status: businessStatus }) =>\n              !businessStatus ? true : businessStatus === 'OPERATIONAL'\n          )\n          if (operationalStores.length === 0) {\n            return {\n              ...method\n            }\n          }\n\n          GOOGLE_MAP_API_CACHE[lookupKey] = []\n\n          for (let index = 0; index < operationalStores.length; index++) {\n            const result = operationalStores[index]\n\n            const { place_id: placeId } = result\n\n            const place = await googleMapsService.getDetails(placeId)\n\n            const distance = await googleMapsService.getDistance(\n            `${street1}, ${city}, ${state} ${zipCode}`,\n            place.formatted_address\n            )\n\n            if (!isStoreWithinDistance(distance?.distance, distanceThreshold)) {\n              continue\n            } else {\n              GOOGLE_MAP_API_CACHE[lookupKey].push({\n                ...method,\n                ...distance,\n                formattedPhoneNumber: place?.formatted_phone_number,\n                formattedAddress: place?.formatted_address,\n                openingHours: {\n                  isOpen: place?.opening_hours?.isOpen(),\n                  weekday_text: place?.opening_hours?.weekday_text,\n                  periods: place?.opening_hours?.periods,\n                  weeklyRange: getWeeklyRange(place),\n                  todayClosingTime: getFormattedStoreTime(place).closingTime,\n                  todayOpeningTime: getFormattedStoreTime(place).openingTime\n                }\n              })\n              updatedMethods.push({\n                ...method,\n                ...distance,\n                formattedPhoneNumber: place?.formatted_phone_number,\n                formattedAddress: place?.formatted_address,\n                openingHours: {\n                  isOpen: place?.opening_hours?.isOpen(),\n                  weekday_text: place?.opening_hours?.weekday_text,\n                  periods: place?.opening_hours?.periods,\n                  weeklyRange: getWeeklyRange(place),\n                  todayClosingTime: getFormattedStoreTime(place).closingTime,\n                  todayOpeningTime: getFormattedStoreTime(place).openingTime\n                }\n              })\n              break\n            }\n          }\n        })\n      )\n    } catch (error) {\n      console.error('Error fetching address Info', { error })\n    }\n\n    if (!isReturnMethodCommited) {\n      commit('updateMethods', updatedMethods)\n    }\n    // commit('setLoading', false)\n  },\n  async fetchNearbyCarriers ({ commit }, { carrier, shippingAddress }) {\n    commit('setLoading', true)\n    const { type, distanceThreshold } = carrier\n    const name = carrier?.customer_facing_carrier\n    const { street1, state, zip_code: zipCode, city } = shippingAddress\n    // const lookupKey = `${state}_${zipCode}_${city}_${name}_${type}_nearby`\n    try {\n      // if (GOOGLE_MAP_API_CACHE[lookupKey]) {\n      //   commit('setNearbyCarriers', GOOGLE_MAP_API_CACHE[lookupKey])\n      //   commit('setLoading', false)\n      //   return\n      // }\n      const places = await googleMapsService.getPlaces(shippingAddress, name, type)\n\n      let results = places\n        .filter(\n          ({ business_status: businessStatus }) =>\n            !businessStatus ? true : businessStatus === 'OPERATIONAL'\n        )\n      // Only calculate distance for a max of ten results\n      if (results.length > 10) {\n        results = results.slice(0, 10)\n      }\n\n      const carriers = []\n      for await (const result of results) {\n        const { place_id: placeId } = result\n\n        var place = GOOGLE_MAP_API_PID_CACHE[placeId]\n        var distance = GOOGLE_MAP_API_DIST_CACHE[placeId]\n\n        if (!place || !distance) {\n          await sleep(200)\n          place = await googleMapsService.getDetails(placeId)\n          GOOGLE_MAP_API_PID_CACHE[placeId] = place\n\n          await sleep(200)\n          distance = await googleMapsService.getDistance(\n            `${street1}, ${city}, ${state} ${zipCode}`,\n            place.formatted_address\n          )\n\n          GOOGLE_MAP_API_DIST_CACHE[placeId] = distance\n        }\n\n        if (isStoreWithinDistance(distance.distance, distanceThreshold) && validStoreName(place.name, type)) {\n          carriers.push({\n            ...carrier,\n            ...distance,\n            name: place.name,\n            formattedPhoneNumber: place?.formatted_phone_number,\n            formattedAddress: place?.formatted_address,\n            icon: result.icon,\n            openingHours: {\n              isOpen: place?.opening_hours?.isOpen(),\n              weeklyRange: getWeeklyRange(place),\n              weekday_text: place?.opening_hours?.weekday_text,\n              periods: place?.opening_hours?.periods,\n              todayClosingTime: getFormattedStoreTime(place).closingTime,\n              todayOpeningTime: getFormattedStoreTime(place).openingTime\n            }\n          })\n        }\n      }\n\n      carriers.sort(\n        (a, b) => +a.distance.split(' ')[0] - +b.distance.split(' ')[0]\n      ).slice(0, 3)\n\n      // GOOGLE_MAP_API_CACHE[lookupKey] = carriers\n\n      commit('setNearbyCarriers', carriers)\n      commit('setLoading', false)\n    } catch (error) {\n      console.error('Error fetching nearby locations', { error })\n      // delete GOOGLE_MAP_API_CACHE[lookupKey]\n      await sleep(5000)\n      store.dispatch('returns/fetchNearbyCarriers', {\n        carrier: carrier,\n        shippingAddress: shippingAddress\n      })\n    }\n  }\n}\n"]}]}