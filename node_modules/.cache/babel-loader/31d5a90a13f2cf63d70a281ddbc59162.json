{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/common/googleMaps.service.js","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/common/googleMaps.service.js","mtime":1650554756616},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1649977087118}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/common/googleMaps.service.js"],"names":["placeService","google","maps","places","PlacesService","document","createElement","distanceService","DistanceMatrixService","geocoder","Geocoder","googleMapsService","getDistance","origin","destination","Promise","resolve","reject","getDistanceMatrix","origins","destinations","travelMode","unitSystem","UnitSystem","IMPERIAL","response","status","originAddresses","destinationAddresses","rows","originAddress","destinationAddress","length","distance","duration","elements","text","getDetails","placeId","fields","place","getLatLng","shippingAddress","geocode","address","results","location","geometry","lat","parseFloat","toString","substr","lng","console","error","getPlaces","name","type","state","zipCode","zip_code","city","searchTerm","toLowerCase","textSearch","query"],"mappings":"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","sourcesContent":["/* global google */\n\nconst placeService = new google.maps.places.PlacesService(\n  document.createElement('div')\n)\nconst distanceService = new google.maps.DistanceMatrixService()\nconst geocoder = new google.maps.Geocoder()\n\nconst googleMapsService = {\n  async getDistance (origin, destination) {\n    return new Promise((resolve, reject) => {\n      distanceService.getDistanceMatrix(\n        {\n          origins: [origin],\n          destinations: [destination],\n          travelMode: 'DRIVING',\n          unitSystem: google.maps.UnitSystem.IMPERIAL\n        },\n        (response, status) => {\n          if (status === 'OK') {\n            const { originAddresses, destinationAddresses, rows } = response\n\n            var originAddress = origin\n            var destinationAddress = destination\n\n            if (originAddresses?.length > 0 && destinationAddresses?.length > 0) {\n              originAddress = originAddresses[0]\n              destinationAddress = destinationAddresses[0]\n            }\n\n            var distance = '1 mi'\n            var duration = '2 mins'\n\n            if (rows?.length > 0 && rows[0]?.elements?.length > 0 && rows[0]?.elements[0]?.distance && rows[0]?.elements[0]?.duration) {\n              distance = rows[0].elements[0].distance.text\n              duration = rows[0].elements[0].duration.text\n            }\n\n            resolve({\n              originAddress,\n              destinationAddress,\n              distance,\n              duration\n            })\n          } else {\n            reject(status)\n          }\n        }\n      )\n    })\n  },\n\n  async getDetails (placeId) {\n    return new Promise((resolve, reject) => {\n      placeService.getDetails(\n        {\n          placeId,\n          fields: [\n            'name',\n            'opening_hours',\n            'utc_offset_minutes',\n            'formatted_phone_number',\n            'formatted_address'\n          ]\n        },\n        async function (place, status) {\n          if (status === 'OK') {\n            resolve(place)\n          } else {\n            reject(status)\n          }\n        }\n      )\n    })\n  },\n\n  async getLatLng (shippingAddress) {\n    let lat\n    let lng\n    await geocoder.geocode({ address: shippingAddress }, function (results, status) {\n      if (status === 'OK' && results.length > 0) {\n        const location = results[0].geometry.location\n        lat = parseFloat(location.lat().toString().substr(0, 12))\n        lng = parseFloat(location.lng().toString().substr(0, 12))\n      } else {\n        console.error('Geocode was not successful for the following reason: ' + status)\n      }\n    })\n    return { lat: lat, lng: lng }\n  },\n\n  async getPlaces (shippingAddress, name, type) {\n    const { state, zip_code: zipCode, city } = shippingAddress\n    const searchTerm =\n      type === 'in-store' || name.toLowerCase() === 'ups' || name.toLowerCase() === 'usps'\n        ? `${name} Store`\n        : name\n\n    return new Promise((resolve, reject) => {\n      placeService.textSearch(\n        {\n          query: `\"${searchTerm}\" ${city} ${state} ${zipCode}`\n        },\n        async function (results, status) {\n          if (status === 'OK') {\n            resolve(results)\n          } else {\n            resolve([])\n          }\n        }\n      )\n    })\n  }\n}\n\nexport default googleMapsService\n"]}]}