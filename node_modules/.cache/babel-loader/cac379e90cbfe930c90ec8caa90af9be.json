{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js??ref--13-0!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/MapController.js","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/MapController.js","mtime":1653330817072},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/@vue/cli-plugin-eslint/node_modules/eslint-loader/index.js","mtime":1649977087118}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/controllers/MapController.js"],"names":["googleMapsService","store","CONSTANTS","getDistanceValue","delay","returnShippingOptions","getNearbyStores","shippingOptions","shippingAddress","getters","expressReturns","getExpressReturns","Error","dispatch","carrier","find","option","type","RETURN_METHODS","EXPRESS_RETURNS","getShippingAddress","getLatLng","latLng","marker","lat","lng","position","address","checkForExpressDropoffOptions","returnMethods","policyReturnMethods","expressReturnsEnabled","policy","policy_return_methods","method","feature_flags","map_enabled","findAllExpressReturnLocations","nearbyCarriers","placesToCoords","length","console","error","getDropoffLocations","gettingCoords","places","markers","i","formattedAddress","push","distance","UNKNOWN","closingTime","openingHours","todayClosingTime","returnMethodsWithinDistance","hasMap","potentialReturnMethods","filter","slice","sort","method1","method2","returnMethodRank","setSelectedReturnMethod","commit"],"mappings":"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","sourcesContent":["/* eslint-disable promise/param-names */\nimport googleMapsService from '@/common/googleMaps.service'\nimport store from '../store'\nimport { CONSTANTS } from '@/constants/index.js'\nimport { getDistanceValue, delay } from '@/utils'\nimport { returnShippingOptions } from '@/controllers/ReturnMethodsController.js'\n\nexport async function getNearbyStores (shippingOptions) {\n  const shippingAddress = store.getters['returns/getAddress']\n  const expressReturns = getExpressReturns(shippingOptions)\n\n  if (!expressReturns) {\n    throw new Error('No Express Returns Available')\n  }\n\n  await store.dispatch('returns/fetchNearbyCarriers', {\n    carrier: expressReturns,\n    shippingAddress: shippingAddress\n  }) // puts nearby carriers in the store\n}\n\n// returns empty string if no express returns\nexport function getExpressReturns (shippingOptions) {\n  return shippingOptions.find(\n    (option) => option.type === CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n  )\n}\n\nexport async function getShippingAddress () {\n  const shippingAddress = store.getters['returns/formattedShippingAddress']\n  const latLng = await googleMapsService.getLatLng(shippingAddress)\n\n  const marker = {\n    lat: latLng.lat,\n    lng: latLng.lng\n  }\n\n  return { position: marker, address: shippingAddress }\n}\n\nexport async function checkForExpressDropoffOptions (\n  returnMethods,\n  policyReturnMethods\n) {\n  let expressReturnsEnabled = false\n\n  try {\n    const policy = store.getters['returns/policies']\n\n    expressReturnsEnabled = policy?.policy_return_methods?.find(\n      (method) => method.type === CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n    )\n    if (policy.feature_flags?.map_enabled && expressReturnsEnabled) {\n      const nearbyCarriers = await findAllExpressReturnLocations(\n        returnMethods,\n        policyReturnMethods,\n        false\n      )\n      expressReturnsEnabled = nearbyCarriers.placesToCoords.length > 0\n    } else {\n      expressReturnsEnabled = false\n    }\n  } catch (e) {\n    console.error(e)\n  }\n  return expressReturnsEnabled\n}\n\n/**\n *\n * @param {*} gettingCoords\n * @returns placesToCoords\n */\n\nexport async function getDropoffLocations (gettingCoords) {\n  const places = store.getters['returns/getNearbyCarriers']\n\n  // if only checking if nearby carriers exist, dont get the coords\n  if (!gettingCoords) {\n    return places\n  }\n  const markers = []\n\n  for (var i = 0; i < places.length; i++) {\n    await delay(500)\n    const latLng = await googleMapsService.getLatLng(\n      places[i].formattedAddress\n    )\n    const marker = {\n      lat: latLng.lat,\n      lng: latLng.lng\n    }\n    markers.push({\n      carrier: places[i],\n      position: marker,\n      distance:\n        places[i].distance !== null ? places[i].distance : CONSTANTS.UNKNOWN,\n      closingTime:\n        places[i].openingHours.todayClosingTime !== null\n          ? places[i].openingHours.todayClosingTime\n          : CONSTANTS.UNKNOWN\n    })\n  }\n\n  return markers\n}\n\nexport async function findAllExpressReturnLocations (\n  returnMethods,\n  policyReturnMethods,\n  gettingCoords\n) {\n  let shippingAddress\n\n  if (gettingCoords) {\n    // dont need shipping address coords for inital map check\n    shippingAddress = await getShippingAddress()\n  }\n\n  let placesToCoords = []\n  const shippingOptions = returnShippingOptions(\n    returnMethods,\n    policyReturnMethods\n  )\n\n  if (\n    shippingOptions &&\n    shippingOptions.length > 0 &&\n    getExpressReturns(shippingOptions)\n  ) {\n    // correct shipping options available\n    await getNearbyStores(shippingOptions)\n    placesToCoords = await getDropoffLocations(gettingCoords)\n  }\n\n  return { shippingAddress: shippingAddress, placesToCoords: placesToCoords }\n}\n\nexport function returnMethodsWithinDistance (hasMap) {\n  let potentialReturnMethods = store.getters['returns/returnMethods']\n\n  if (hasMap) {\n    potentialReturnMethods = potentialReturnMethods.filter(\n      (method) => method.type !== CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n    )\n  }\n  return potentialReturnMethods\n    .slice()\n    .sort(\n      (method1, method2) =>\n        method1.returnMethodRank - method2.returnMethodRank ||\n        getDistanceValue(method1?.distance) -\n          getDistanceValue(method2?.distance)\n    )\n}\n\nexport function setSelectedReturnMethod (carrier) {\n  store.commit('returns/setSelectedReturnMethod', carrier)\n}\n"]}]}