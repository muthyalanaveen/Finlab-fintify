{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/pages/TrackerView.vue?vue&type=template&id=c870019c&","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/pages/TrackerView.vue","mtime":1663867175568},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1649977090695},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js","mtime":1649977089802}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},null]}