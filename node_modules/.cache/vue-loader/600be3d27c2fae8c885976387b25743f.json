{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/atoms/OPlacesAutoComplete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/atoms/OPlacesAutoComplete.vue","mtime":1649953715464},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/babel-loader/lib/index.js","mtime":1649977089120},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js","mtime":1649977089802}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["OPlacesAutoComplete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsfile":"OPlacesAutoComplete.vue","sourceRoot":"src/components/atoms","sourcesContent":["// Code based on from https://github.com/olefirenko/vue-google-autocomplete\n\n<template>\n  <o-text-field\n    ref=\"autocomplete\"\n    type=\"text\"\n    :class=\"classname\"\n    :id=\"id\"\n    :placeholder=\"placeholder\"\n    :disabled=\"disabled\"\n    v-model=\"autocompleteText\"\n    @focus=\"onFocus()\"\n    @blur=\"onBlur()\"\n    @change=\"onChange\"\n    @keypress=\"onKeyPress\"\n    @keyup=\"onKeyUp\"\n    @onChange=\"onChange\"\n    v-bind=\"{...$props, ...$attrs}\"\n  />\n</template>\n\n<script>\nimport OTextField from '@/components/molecules/OTextField.vue'\n/* global google */\nconst ADDRESS_COMPONENTS = {\n  subpremise: 'short_name',\n  street_number: 'short_name',\n  route: 'long_name',\n  locality: 'long_name',\n  administrative_area_level_1: 'short_name',\n  administrative_area_level_2: 'long_name',\n  country: 'long_name',\n  postal_code: 'short_name'\n}\nconst CITIES_TYPE = ['locality', 'administrative_area_level_3']\nconst REGIONS_TYPE = [\n  'locality',\n  'sublocality',\n  'postal_code',\n  'country',\n  'administrative_area_level_1',\n  'administrative_area_level_2'\n]\n/*\n      By default, we're only including basic place data because requesting these\n      fields place data is not additionally charged by Google. Please refer to:\n      https://developers.google.com/maps/billing/understanding-cost-of-use#basic-data\n    */\nconst BASIC_DATA_FIELDS = [\n  'address_components',\n  'adr_address',\n  'alt_id',\n  'formatted_address',\n  'geometry',\n  'icon',\n  'id',\n  'name',\n  'business_status',\n  'photo',\n  'place_id',\n  'scope',\n  'type',\n  'url',\n  'vicinity'\n]\nexport default {\n  components: { OTextField },\n  name: 'VueGoogleAutocomplete',\n  props: {\n    id: {\n      type: String,\n      required: true\n    },\n    classname: {\n      type: String,\n      required: false,\n      default: ''\n    },\n    placeholder: {\n      type: String,\n      default: 'Start typing'\n    },\n    disabled: {\n      type: Boolean,\n      default: false\n    },\n    types: {\n      type: String,\n      default: 'address'\n    },\n    fields: {\n      type: Array,\n      default: function () {\n        return BASIC_DATA_FIELDS\n      }\n    },\n    country: {\n      type: [String, Array],\n      default: null\n    },\n    enableGeolocation: {\n      type: Boolean,\n      default: false\n    },\n    geolocationOptions: {\n      type: Object,\n      default: null\n    }\n  },\n  data () {\n    return {\n      /**\n       * The Autocomplete object.\n       *\n       * @type {Autocomplete}\n       * @link https://developers.google.com/maps/documentation/javascript/reference#Autocomplete\n       */\n      autocomplete: null,\n      /**\n       * Autocomplete input text\n       * @type {String}\n       */\n      autocompleteText: '',\n      geolocation: {\n        /**\n         * Google Geocoder Objet\n         * @type {Geocoder}\n         * @link https://developers.google.com/maps/documentation/javascript/reference#Geocoder\n         */\n        geocoder: null,\n        /**\n         * Filled after geolocate result\n         * @type {Coordinates}\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/Coordinates\n         */\n        loc: null,\n        /**\n         * Filled after geolocate result\n         * @type {Position}\n         * @link https://developer.mozilla.org/en-US/docs/Web/API/Position\n         */\n        position: null\n      }\n    }\n  },\n  watch: {\n    autocompleteText: function (newVal, oldVal) {\n      this.$emit('inputChange', { newVal, oldVal }, this.id)\n    },\n    country: function (newVal, oldVal) {\n      this.autocomplete.setComponentRestrictions({\n        country: this.country === null ? [] : this.country\n      })\n    }\n  },\n  mounted: function () {\n    const options = {}\n    if (this.types) {\n      options.types = [this.types]\n    }\n    if (this.country) {\n      options.componentRestrictions = {\n        country: this.country\n      }\n    }\n    this.autocomplete = new google.maps.places.Autocomplete(\n      document.getElementById(this.id),\n      options\n    )\n    this.autocomplete.setFields(this.fields)\n    this.autocomplete.addListener('place_changed', this.onPlaceChanged)\n  },\n  methods: {\n    /**\n     * When a place changed\n     */\n    onPlaceChanged () {\n      const place = this.autocomplete.getPlace()\n      if (!place.geometry) {\n        // User entered the name of a Place that was not suggested and\n        // pressed the Enter key, or the Place Details request failed.\n        this.$emit('no-results-found', place, this.id)\n        return\n      }\n      if (place.address_components !== undefined) {\n        // return returnData object and PlaceResult object\n        this.$emit('placechanged', this.formatResult(place), place, this.id)\n        // update autocompleteText then emit change event\n        this.autocompleteText = document.getElementById(this.id).value\n        this.onChange()\n      }\n    },\n    /**\n     * When the input gets focus\n     */\n    onFocus () {\n      this.biasAutocompleteLocation()\n      this.$emit('focus')\n    },\n    /**\n     * When the input loses focus\n     */\n    onBlur () {\n      this.$emit('blur')\n    },\n    /**\n     * When the input got changed\n     */\n    onChange () {\n      this.$emit('change', document.getElementById(this.id).value)\n    },\n    /**\n     * When a key gets pressed\n     * @param  {Event} event A keypress event\n     */\n    onKeyPress (event) {\n      this.$emit('keypress', event)\n    },\n    /**\n     * When a keyup occurs\n     * @param  {Event} event A keyup event\n     */\n    onKeyUp (event) {\n      this.$emit('keyup', event)\n    },\n    /**\n     * Clear the input\n     */\n    clear () {\n      this.autocompleteText = ''\n    },\n    /**\n     * Focus the input\n     */\n    focus () {\n      this.$refs.autocomplete.focus()\n    },\n    /**\n     * Blur the input\n     */\n    blur () {\n      this.$refs.autocomplete.blur()\n    },\n    /**\n     * Update the value of the input\n     * @param  {String} value\n     */\n    update (value) {\n      this.autocompleteText = value\n    },\n    /**\n     * Update the coordinates of the input\n     * @param  {Coordinates} value\n     */\n    updateCoordinates (value) {\n      if (!value && !(value.lat || value.lng)) return\n      if (!this.geolocation.geocoder) {\n        this.geolocation.geocoder = new google.maps.Geocoder()\n      }\n      this.geolocation.geocoder.geocode(\n        { location: value },\n        (results, status) => {\n          if (status === 'OK') {\n            results = this.filterGeocodeResultTypes(results)\n            if (results[0]) {\n              this.$emit(\n                'placechanged',\n                this.formatResult(results[0]),\n                results[0],\n                this.id\n              )\n              this.update(results[0].formatted_address)\n            } else {\n              this.$emit('error', 'no result for provided coordinates')\n            }\n          } else {\n            this.$emit('error', 'error getting address from coords')\n          }\n        }\n      )\n    },\n    /**\n     * Update location based on navigator geolocation\n     */\n    geolocate () {\n      this.updateGeolocation((geolocation, position) => {\n        this.updateCoordinates(geolocation)\n      })\n    },\n    /**\n     * Update internal location from navigator geolocation\n     * @param  {Function} (geolocation, position)\n     */\n    updateGeolocation (callback = null) {\n      if (navigator.geolocation) {\n        const options = {}\n        if (this.geolocationOptions) {\n          Object.assign(options, this.geolocationOptions)\n        }\n        navigator.geolocation.getCurrentPosition(\n          (position) => {\n            const geolocation = {\n              lat: position.coords.latitude,\n              lng: position.coords.longitude\n            }\n            this.geolocation.loc = geolocation\n            this.geolocation.position = position\n            if (callback) callback(geolocation, position)\n          },\n          (err) => {\n            this.$emit('error', 'Cannot get Coordinates from navigator', err)\n          },\n          options\n        )\n      }\n    },\n    // Bias the autocomplete object to the user's geographical location,\n    // as supplied by the browser's 'navigator.geolocation' object.\n    biasAutocompleteLocation () {\n      if (this.enableGeolocation) {\n        this.updateGeolocation((geolocation, position) => {\n          const circle = new google.maps.Circle({\n            center: geolocation,\n            radius: position.coords.accuracy\n          })\n          this.autocomplete.setBounds(circle.getBounds())\n        })\n      }\n    },\n    /**\n     * Format result from Geo google APIs\n     * @param place\n     * @returns {{formatted output}}\n     */\n    formatResult (place) {\n      const returnData = {}\n      for (let i = 0; i < place.address_components.length; i++) {\n        const addressType = place.address_components[i].types[0]\n        if (ADDRESS_COMPONENTS[addressType]) {\n          const val =\n            place.address_components[i][ADDRESS_COMPONENTS[addressType]]\n          returnData[addressType] = val\n        }\n      }\n      returnData.latitude = place.geometry.location.lat()\n      returnData.longitude = place.geometry.location.lng()\n      return returnData\n    },\n    /**\n     * Extract configured types out of raw result as\n     * Geocode API does not allow to do it\n     * @param results\n     * @returns {GeocoderResult}\n     * @link https://developers.google.com/maps/documentation/javascript/reference#GeocoderResult\n     */\n    filterGeocodeResultTypes (results) {\n      if (!results || !this.types) return results\n      const output = []\n      let types = [this.types]\n      if (types.includes('(cities)')) types = types.concat(CITIES_TYPE)\n      if (types.includes('(regions)')) types = types.concat(REGIONS_TYPE)\n      for (const r of results) {\n        for (const t of r.types) {\n          if (types.includes(t)) {\n            output.push(r)\n            break\n          }\n        }\n      }\n      return output\n    }\n  }\n}\n</script>\n"]}]}