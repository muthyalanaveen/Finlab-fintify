{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/organism/ExpressReturnMethod.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/organism/ExpressReturnMethod.vue","mtime":1650554756621},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/css-loader/index.js","mtime":1649977086861},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1649977090577},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js","mtime":1649977089802}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgouZ21ub3ByaW50LCAuZ20tc3R5bGUtY2MgewogIGRpc3BsYXk6IG5vbmUgIWltcG9ydGFudDsKICB2aXNpYmlsaXR5OiBoaWRkZW4gIWltcG9ydGFudDsKfQoubG9hZGVyIHsKICB6LWluZGV4OiAxMTsKICBkaXNwbGF5OiBmbGV4OwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwp9CiNtYXAgewogIHdpZHRoOjEwMCU7CiAgaGVpZ2h0OiA0MDBweDsKfQouaW5mby13aW5kb3ctdGV4dCB7CiAgZm9udC1mYW1pbHk6IHZhcigtLWJzLWJvZHktZm9udC1mYW1pbHkpOwogIGZvbnQtc2l6ZTogMTFweDsKICBmb250LXdlaWdodDogdmFyKC0tYnMtYm9keS1mb250LXdlaWdodCk7CiAgY29sb3I6IHZhcigtLWJzLWJvZHktY29sb3IpOwogIGxpbmUtaGVpZ2h0OiB2YXIoLS1icy1ib2R5LWxpbmUtaGVpZ2h0KTsKfQouZ20tc3R5bGUgLmdtLXN0eWxlLWl3LWMgewogIGJvcmRlci1yYWRpdXM6IDE2cHggIWltcG9ydGFudDsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIHdpZHRoOiAxODBweDsKICBoZWlnaHQ6IDQycHg7CiAgcGFkZGluZzogMTBweDsKfQouZ20tdWktaG92ZXItZWZmZWN0IHsKICB0b3A6IC0zcHggIWltcG9ydGFudDsKICByaWdodDogMHB4ICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["ExpressReturnMethod.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ExpressReturnMethod.vue","sourceRoot":"src/components/organism","sourcesContent":["<template>\n  <div>\n    <v-overlay\n      :value=\"isLoading\"\n      :z-index=\"1\"\n    >\n      <v-progress-circular\n        class=\"loader\"\n        indeterminate\n        size=\"100\"\n      />\n    </v-overlay>\n    <div id=\"map\" />\n  </div>\n</template>\n\n<script>\nimport { findAllExpressReturnLocations } from '@/controllers/map.js'\nimport { mapGetters } from 'vuex'\nimport { CONSTANTS } from '@/constants/index.js'\n\nexport default {\n  /* eslint-disable no-new */\n  /* eslint-disable no-undef */\n  name: 'ExpressReturnMethod',\n  data () {\n    return {\n      shippingAddress: {},\n      placesToCoords: [],\n      isLoading: true,\n      map: null,\n      markers: [],\n      centerIndex: 0,\n      centerIcon: {\n        url: require('@/assets/images/StaplesIcon.png'),\n        scaledSize: new google.maps.Size(28, 28)\n      },\n      mainIcon: {\n        url: require('@/assets/images/StaplesIcon.png'),\n        scaledSize: new google.maps.Size(20, 20)\n      },\n      homeIcon: {\n        url: require('@/assets/images/purple-home.png'),\n        scaledSize: new google.maps.Size(40, 40)\n      },\n      openedInfoWindow: null\n    }\n  },\n  computed: {\n    ...mapGetters({\n      policyReturnMethods: 'returns/policyReturnMethods',\n      returnMethods: 'returns/returnMethods'\n    })\n  },\n  async mounted () {\n    try {\n      this.initMap()\n      const result = await findAllExpressReturnLocations(this.returnMethods, this.policyReturnMethods)\n      this.shippingAddress = result.shippingAddress\n      this.placesToCoords = result.placesToCoords\n      this.setInitialMarkers()\n    } catch (e) {\n      console.error(e)\n    }\n    this.isLoading = false\n  },\n  methods: {\n    initMap () {\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: { lng: CONSTANTS.BASE_LNG, lat: CONSTANTS.BASE_LAT },\n        zoom: 10,\n        options: {\n          zoomControl: false,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false\n        }\n      })\n    },\n    openInfoWindow (map, marker, index) {\n      // change icons\n      // map.setCenter(marker.getPosition())\n      if (index !== -1) { // not shipping address\n        marker.setIcon(this.centerIcon)\n      }\n      this.markers[this.centerIndex].marker.setIcon(this.mainIcon)\n      if (index !== -1) {\n        this.centerIndex = index\n      }\n      // open/close info windows\n      if (this.openedInfoWindow !== null) {\n        this.openedInfoWindow.close()\n      }\n      const infoWindow = new google.maps.InfoWindow({\n        content: this.createContentString(index)\n      })\n      infoWindow.open(map, marker)\n      this.openedInfoWindow = infoWindow\n    },\n    createMarker (map, openInfoWindow, index) {\n      var marker\n      if (index === this.centerIndex && index !== -1) { // first marker automatically bigger, center index is 0 atm\n        marker = new google.maps.Marker({\n          position: this.placesToCoords[index].position,\n          map,\n          icon: this.centerIcon\n        })\n      } else if (index !== -1) { // all other icons\n        marker = new google.maps.Marker({\n          position: this.placesToCoords[index].position,\n          map,\n          icon: this.mainIcon\n        })\n      } else { // home icon, no click listener\n        marker = new google.maps.Marker({\n          position: this.shippingAddress.position,\n          map,\n          icon: this.homeIcon\n        })\n      }\n      if (index !== -1) {\n        marker.addListener('click', (function (map, marker, index) {\n          return function () {\n            openInfoWindow(map, marker, index)\n          }\n        }(map, marker, index)))\n      }\n      this.markers.push({ marker: marker, distance: index !== -1 ? this.placesToCoords[index].distance : null, closingTime: index !== -1 ? this.placesToCoords[index].closingTime : null })\n    },\n    setInitialMarkers () {\n      const { map, openInfoWindow } = this\n\n      for (let i = 0; i < this.placesToCoords.length; i++) {\n        this.createMarker(map, openInfoWindow, i)\n      }\n      this.createMarker(map, openInfoWindow, -1)\n      map.setCenter(this.markers[0].marker.getPosition()) // center is always first address for the moment\n\n      // have the first window automatically opened\n      const infoWindow = new google.maps.InfoWindow({\n        content: this.createContentString(0)\n      })\n      if (this.markers[0].distance !== null || this.markers[0].closingTime !== null) { // not home icon\n        infoWindow.open(map, this.markers[0].marker)\n        this.openedInfoWindow = infoWindow\n      }\n    },\n    createContentString (index) {\n      if (this.markers[index].distance !== null && this.markers[index].closingTime !== null) {\n        const distance = this.markers[index].distance !== CONSTANTS.UNKNOWN ? (this.markers[index].distance) : ''\n        const closesAt = this.markers[index].closingTime !== CONSTANTS.UNKNOWN ? ('closes at ' + String(this.markers[index].closingTime)) : ''\n        const middle = (closesAt === '' || distance === '') ? '' : '  ' + '&middot;' + '  '\n        return '<div class=\"info-window-content\"><span class=\"info-window-text\">' + distance + middle + closesAt +\n        '</span></div>'\n      }\n      return ''\n    }\n  }\n}\n</script>\n\n<style>\n  .gmnoprint, .gm-style-cc {\n    display: none !important;\n    visibility: hidden !important;\n  }\n  .loader {\n    z-index: 11;\n    display: flex;\n    justify-content: center;\n  }\n  #map {\n    width:100%;\n    height: 400px;\n  }\n  .info-window-text {\n    font-family: var(--bs-body-font-family);\n    font-size: 11px;\n    font-weight: var(--bs-body-font-weight);\n    color: var(--bs-body-color);\n    line-height: var(--bs-body-line-height);\n  }\n  .gm-style .gm-style-iw-c {\n    border-radius: 16px !important;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    justify-content: center;\n    width: 180px;\n    height: 42px;\n    padding: 10px;\n  }\n  .gm-ui-hover-effect {\n    top: -3px !important;\n    right: 0px !important;\n  }\n</style>\n"]}]}