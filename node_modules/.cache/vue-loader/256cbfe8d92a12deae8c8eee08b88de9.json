{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/src/components/pages/ReturnMethods.vue?vue&type=template&id=223bb7d7&scoped=true&","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/src/components/pages/ReturnMethods.vue","mtime":1665066062330},{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1649977090695},{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/Asset/returns_portal_ui/node_modules/vue-loader/lib/index.js","mtime":1649977089802}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}