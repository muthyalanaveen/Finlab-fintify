{"remainingRequest":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/organism/ExpressReturnMethod.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/src/components/organism/ExpressReturnMethod.vue","mtime":1660764079783},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/css-loader/index.js","mtime":1649977086861},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1649977090577},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/cache-loader/dist/cjs.js","mtime":1649977086874},{"path":"/Users/naveenmuthyala/Documents/Projects/returns_portal_ui/returns_portal_ui/node_modules/vue-loader/lib/index.js","mtime":1649977089802}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKLmdtbm9wcmludCwgLmdtLXN0eWxlLWNjIHsKICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7CiAgdmlzaWJpbGl0eTogaGlkZGVuICFpbXBvcnRhbnQ7Cn0KLmxvYWRlciB7CiAgei1pbmRleDogMTE7CiAgZGlzcGxheTogZmxleDsKICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjsKfQoubWFwLWxnIHsKICB3aWR0aDogNTAlOwogIGhlaWdodDogYXV0bzsKfQouZ20tdWktaG92ZXItZWZmZWN0IHsKICBkaXNwbGF5OiBub25lICFpbXBvcnRhbnQ7Cn0KLmluZm8td2luZG93LXRleHQgewogIGZvbnQtZmFtaWx5OiB2YXIoLS1mb250LWZhbWlseSk7CiAgZm9udC1zaXplOiAxMXB4OwogIGZvbnQtd2VpZ2h0OiA3MDAgIWltcG9ydGFudDsKICBjb2xvcjogdmFyKC0tdGV4dC1wcmltYXJ5KTsKfQouZ20tc3R5bGUgLmdtLXN0eWxlLWl3LWMgewogIGJvcmRlci1yYWRpdXM6IDE2cHggIWltcG9ydGFudDsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgdGV4dC1hbGlnbjogY2VudGVyOwogIGp1c3RpZnktY29udGVudDogY2VudGVyOwogIHdpZHRoOiAxNzVweDsKICBoZWlnaHQ6IDMwcHg7CiAgcGFkZGluZzogMTBweDsKfQpAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQxNHB4KSB7CiAgLmdtLXN0eWxlIC5nbS1zdHlsZS1pdy1jIHsKICAgIHBhZGRpbmc6IDBweDsKICB9Cn0KLmdtLXVpLWhvdmVyLWVmZmVjdCB7CiAgdG9wOiAtM3B4ICFpbXBvcnRhbnQ7CiAgcmlnaHQ6IDBweCAhaW1wb3J0YW50Owp9Ci5tYXAtdmlldy1sZyB7CiAgZGlzcGxheTogZmxleDsKICBoZWlnaHQ6IDcyMHB4OwogIG1hcmdpbi1ib3R0b206IDhweDsKICBmbGV4LWRpcmVjdGlvbjogcm93LXJldmVyc2U7Cn0KLm1hcC10aWxlcy1sZyB7CiAgd2lkdGg6IDUwJTsKfQoubWFwLXNtIHsKICBoZWlnaHQ6IDM0MnB4OwogIHdpZHRoOiAxMDAlOwp9Ci5tYXAtdGlsZXMtc20gewogIHdpZHRoOiAxMDAlOwp9Ci5tYXAtdmlldy1zbSB7CiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjsKICBoZWlnaHQ6IHVuc2V0Owp9Ci5zaGlwcGluZy1hZGRyZXNzIHsKICBvdmVyZmxvdzogaGlkZGVuICFpbXBvcnRhbnQ7Cn0K"},{"version":3,"sources":["ExpressReturnMethod.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ExpressReturnMethod.vue","sourceRoot":"src/components/organism","sourcesContent":["<template>\n  <div>\n    <v-overlay\n      :value=\"isLoading\"\n      :z-index=\"1\"\n    >\n      <v-progress-circular\n        class=\"loader\"\n        indeterminate\n        size=\"50\"\n      />\n    </v-overlay>\n    <o-shipping-address\n      v-if=\"!isLoading\"\n      :dialog-type=\"DIALOG_SEARCH_LOCATION\"\n      :formatted-address=\"formattedAddress\"\n      :open-map-modal=\"openMapModal\"\n      :class=\"{\n        'ml-9 mt-3': $vuetify.breakpoint.xs,\n        'mt-5': $vuetify.breakpoint.mdAndUp\n      }\"\n      class=\"mb-5 shipping-address\"\n    />\n    <div :class=\"$vuetify.breakpoint.smAndDown ? 'map-view-sm' : 'map-view-lg'\">\n      <div id=\"map\" :class=\"$vuetify.breakpoint.smAndDown ? 'map-sm' : 'map-lg'\" />\n      <not-found-return-method\n        v-if=\"placesToCoords.length === 0 && !isLoading\"\n        :class=\"$vuetify.breakpoint.smAndDown ? 'text-center' : 'text-center mr-8'\"\n        :style=\"$vuetify.breakpoint.smAndDown ? '' : 'width: 50%'\"\n        :title=\"noDropoffLocationsFound\"\n        :customer-support-contact=\"customerSupportContact\"\n      />\n      <map-tiles\n        v-else-if=\"!isLoading && placesToCoords.length !== 0\"\n        :carriers=\"placesToCoords\"\n        :class=\"$vuetify.breakpoint.smAndDown ? 'map-tiles-sm' : 'map-tiles-lg'\"\n        ref=\"map-tiles\"\n        :scroll-to-view=\"scrollToView\"\n      />\n      <v-col v-if=\"isLoading\" :style=\"$vuetify.breakpoint.smAndDown ? 'display: flex;' : ''\">\n        <v-skeleton-loader\n          v-for=\"n in skeletonLoadingAmount\"\n          :key=\"n\"\n          :class=\"$vuetify.breakpoint.mdAndUp ? '' : 'mt-3'\"\n          type=\"list-item-two-line\"\n          :style=\"$vuetify.breakpoint.mdAndUp ? 'width:90%; background: #f2f5ff;' : 'width:90%; height: 195px; background: #f2f5ff;'\"\n        />\n      </v-col>\n    </div>\n    <o-dialog\n      :visible=\"\n        isMapModalOpen\"\n      :is-full-screen=\"true\"\n      @close=\"closeMapModal\"\n    >\n      <search-return-location source=\"mapView\" />\n    </o-dialog>\n    <o-dialog\n      :visible=\"isCarrierInfoModalOpen\"\n      :is-full-screen=\"true\"\n      @close=\"closeCarrierInfoModal\"\n    >\n      <return-store-info :disable-back-button=\"true\" />\n    </o-dialog>\n  </div>\n</template>\n\n<script>\nimport { findAllExpressReturnLocations } from '@/controllers/MapController.js'\nimport { mapGetters, mapMutations } from 'vuex'\nimport { CONSTANTS } from '@/constants/index.js'\nimport NotFoundReturnMethod from '@/components/molecules/NotFoundReturnMethod'\nimport {\n  DIALOG_SEARCH_LOCATION\n} from '@/store/constants'\nimport OShippingAddress from '@/components/atoms/OShippingAddress.vue'\nimport ODialog from '@/components/atoms/ODialog.vue'\nimport SearchReturnLocation from '@/components/organism/SearchReturnLocation.vue'\nimport MapTiles from '@/components/organism/MapTiles.vue'\nimport { RETURN_METHOD_SCREENS } from 'branding/strings.json'\nimport ReturnStoreInfo from '@/components/organism/ReturnStoreInfo.vue'\n\nexport default {\n  /* eslint-disable no-new */\n  /* eslint-disable no-undef */\n  name: 'ExpressReturnMethod',\n  components: { OShippingAddress, ODialog, SearchReturnLocation, MapTiles, ReturnStoreInfo, NotFoundReturnMethod },\n  data () {\n    return {\n      shippingAddress: {},\n      DIALOG_SEARCH_LOCATION: DIALOG_SEARCH_LOCATION,\n      placesToCoords: [],\n      isLoading: true,\n      map: null,\n      markers: [],\n      skeletonLoadingAmount: 5,\n      isMapModalOpen: false,\n      centerIndex: 0,\n      centerIcon: {\n        url: require('@/assets/images/StaplesIcon.png'),\n        scaledSize: new google.maps.Size(28, 28)\n      },\n      mainIcon: {\n        url: require('@/assets/images/StaplesIcon.png'),\n        scaledSize: new google.maps.Size(20, 20)\n      },\n      homeIcon: {\n        url: require('@/assets/images/location-icon.png'),\n        scaledSize: new google.maps.Size(40, 40)\n      },\n      openedInfoWindow: null,\n      customerSupportContact: '',\n      isCarrierInfoModalOpen: false\n    }\n  },\n  computed: {\n    ...mapGetters({\n      policyReturnMethods: 'returns/policyReturnMethods',\n      returnMethods: 'returns/returnMethods',\n      formattedAddress: 'returns/formattedShippingAddress',\n      isModalOpen: 'returns/getIsModalOpen',\n      unformattedAddress: 'returns/getAddress',\n      policies: 'returns/policies'\n    }),\n    noDropoffLocationsFound () {\n      const distance = this.policies?.policy_return_methods?.find(\n        (method) => method.type === CONSTANTS.RETURN_METHODS.EXPRESS_RETURNS\n      )?.distance_threshold\n      return RETURN_METHOD_SCREENS.NO_DROPOFF_LOCATIONS_FOUND.replace('$$distanceRadius', distance)\n    }\n  },\n  watch: {\n    formattedAddress: {\n      deep: true,\n      handler () {\n        this.loadDropoffLocationData()\n      }\n    }\n  },\n  async mounted () {\n    if (this.$vuetify.breakpoint.smAndDown) {\n      this.skeletonLoadingAmount = 1\n    }\n    try {\n      this.customerSupportContact = this.policies?.retailer_info?.customer_support_contact\n      this.initMap()\n      await this.setInitialMarkers()\n    } catch (e) {\n      console.error(e)\n    }\n  },\n  methods: {\n    ...mapMutations({\n      setSelectedCarrier: 'returns/setSelectedCarrier'\n    }),\n    openMapModal () {\n      this.isMapModalOpen = true\n    },\n    openCarrierInfoModal () {\n      this.isCarrierInfoModalOpen = true\n    },\n    closeCarrierInfoModal () {\n      this.isCarrierInfoModalOpen = false\n    },\n    closeMapModal () {\n      this.isMapModalOpen = false\n    },\n    async loadDropoffLocationData () {\n      // remove all existing markers\n      this.markers.map(marker => {\n        marker.marker.setMap(null)\n      })\n\n      // reset markers\n      this.markers = []\n\n      // close any necessary info window\n      if (this.openedInfoWindow !== null) {\n        this.openedInfoWindow.close()\n      }\n\n      // close modal if open\n      if (this.isMapModalOpen) {\n        this.closeMapModal()\n      }\n\n      try {\n        await this.setInitialMarkers()\n      } catch (e) {\n        console.error(e)\n      }\n      // reset refs\n      var lngth = Object.keys(this.$refs['map-tiles'].$refs).length\n      var initDiv = 'item' + String(0)\n      for (let j = this.placesToCoords.length; j < lngth; j++) {\n        const divName = 'item' + String(j)\n        delete this.$refs['map-tiles'].$refs[divName]\n      }\n      // reset center index\n      this.centerIndex = 0\n      this.$refs['map-tiles'].$refs[initDiv][0].$el.classList.add('bg-well')\n      this.$refs['map-tiles'].$refs[initDiv][0].$el.classList.remove('white')\n    },\n    scrollToView (i, openWindow) {\n      const refName = 'item' + String(i)\n      this.$refs['map-tiles'].$refs[refName][0].$el.scrollIntoView({ behavior: 'smooth' })\n      for (let j = 0; j < Object.keys(this.$refs['map-tiles'].$refs).length; j++) {\n        const divName = 'item' + String(j)\n        if (j === i) { // grey out clicked on tile\n          this.$refs['map-tiles'].$refs[divName][0].$el.classList.add('bg-well')\n          this.$refs['map-tiles'].$refs[divName][0].$el.classList.remove('white')\n        } else { // white out every other tile\n          this.$refs['map-tiles'].$refs[divName][0].$el.classList.add('white')\n          this.$refs['map-tiles'].$refs[divName][0].$el.classList.remove('bg-well')\n        }\n      }\n      if (openWindow) { // clicked on tile so open window\n        this.openInfoWindow(this.map, this.markers[i].marker, i, false)\n      }\n    },\n    initMap () {\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: { lng: CONSTANTS.BASE_LNG, lat: CONSTANTS.BASE_LAT },\n        zoom: 12,\n        options: {\n          zoomControl: false,\n          mapTypeControl: false,\n          scaleControl: false,\n          streetViewControl: false,\n          rotateControl: false,\n          fullscreenControl: false\n        }\n      })\n    },\n    openInfoWindow (map, marker, index, scrollToView) {\n      // map.setCenter(marker.getPosition())\n\n      if (scrollToView) { // clicked on marker to scroll tile\n        this.scrollToView(index, false)\n      }\n\n      // not shipping address\n      if (index !== -1) {\n        marker.setIcon(this.centerIcon)\n      }\n      this.markers[this.centerIndex].marker.setIcon(this.mainIcon)\n\n      if (index !== -1) {\n        this.centerIndex = index\n      }\n\n      // open/close info windows\n      if (this.openedInfoWindow !== null) {\n        this.openedInfoWindow.close()\n      }\n      const infoWindow = new google.maps.InfoWindow({\n        content: this.createContentString(index)\n      })\n\n      infoWindow.addListener('domready', () => {\n        const window = document.getElementById('listen-for-click')\n        window.addEventListener('click', () => {\n          if (this.placesToCoords && this.placesToCoords.length > 0) {\n            this.setSelectedCarrier(this.placesToCoords[index].carrier)\n            this.openCarrierInfoModal()\n          }\n        })\n      })\n\n      infoWindow.open(map, marker)\n\n      this.openedInfoWindow = infoWindow\n    },\n    createMarker (map, openInfoWindow, index) {\n      let marker\n\n      if (index === this.centerIndex && index !== -1) { // first marker automatically bigger, center index is 0 atm\n        marker = new google.maps.Marker({\n          position: this.placesToCoords[index].position,\n          map,\n          icon: this.centerIcon\n        })\n      } else if (index !== -1) { // all other icons\n        marker = new google.maps.Marker({\n          position: this.placesToCoords[index].position,\n          map,\n          icon: this.mainIcon\n        })\n      } else { // home icon, no click listener\n        marker = new google.maps.Marker({\n          position: this.shippingAddress.position,\n          map,\n          icon: this.homeIcon\n        })\n      }\n\n      if (index !== -1) {\n        marker.addListener('click', (function (map, marker, index) {\n          return function () {\n            openInfoWindow(map, marker, index, true)\n          }\n        }(map, marker, index)))\n      }\n\n      this.markers.push({ marker: marker, distance: index !== -1 ? this.placesToCoords[index].distance : null, closingTime: index !== -1 ? this.placesToCoords[index].closingTime : null })\n    },\n    async setInitialMarkers () {\n      this.isLoading = true\n\n      const result = await findAllExpressReturnLocations(this.returnMethods, this.policyReturnMethods, true)\n      this.shippingAddress = result.shippingAddress\n      this.placesToCoords = result.placesToCoords\n\n      const { map, openInfoWindow } = this\n      for (let i = 0; i < this.placesToCoords.length; i++) {\n        this.createMarker(map, openInfoWindow, i)\n      }\n      this.createMarker(map, openInfoWindow, -1)\n      map.setCenter(this.markers[0].marker.getPosition()) // center is always first address for the moment\n\n      // have the first window automatically opened\n      const infoWindow = new google.maps.InfoWindow({\n        content: this.createContentString(0)\n      })\n\n      infoWindow.addListener('domready', () => {\n        const window = document.getElementById('listen-for-click')\n        window.addEventListener('click', () => {\n          if (this.placesToCoords && this.placesToCoords.length > 0) {\n            this.setSelectedCarrier(this.placesToCoords[0].carrier)\n            this.openCarrierInfoModal()\n          }\n        })\n      })\n\n      if (this.markers[0].distance !== null || this.markers[0].closingTime !== null) { // not home icon\n        infoWindow.open(map, this.markers[0].marker)\n        this.openedInfoWindow = infoWindow\n      }\n\n      this.isLoading = false\n    },\n    createContentString (index) {\n      if (this.markers[index].distance !== null && this.markers[index].closingTime !== null) {\n        const distance = this.markers[index].distance !== CONSTANTS.UNKNOWN ? (this.markers[index].distance) : ''\n        const closesAt = this.markers[index].closingTime !== CONSTANTS.UNKNOWN ? ('closes at ' + String(this.markers[index].closingTime)) : ''\n        const middle = (closesAt === '' || distance === '') ? '' : '  ' + '&middot;' + '  '\n        return '<div id=\"listen-for-click\" class=\"info-window-content\"><span class=\"info-window-text\">' + distance + middle + closesAt +\n        '</span></div>'\n      }\n      return ''\n    }\n  }\n}\n</script>\n\n<style>\n  .gmnoprint, .gm-style-cc {\n    display: none !important;\n    visibility: hidden !important;\n  }\n  .loader {\n    z-index: 11;\n    display: flex;\n    justify-content: center;\n  }\n  .map-lg {\n    width: 50%;\n    height: auto;\n  }\n  .gm-ui-hover-effect {\n    display: none !important;\n  }\n  .info-window-text {\n    font-family: var(--font-family);\n    font-size: 11px;\n    font-weight: 700 !important;\n    color: var(--text-primary);\n  }\n  .gm-style .gm-style-iw-c {\n    border-radius: 16px !important;\n    display: flex;\n    align-items: center;\n    text-align: center;\n    justify-content: center;\n    width: 175px;\n    height: 30px;\n    padding: 10px;\n  }\n  @media only screen and (max-width: 414px) {\n    .gm-style .gm-style-iw-c {\n      padding: 0px;\n    }\n  }\n  .gm-ui-hover-effect {\n    top: -3px !important;\n    right: 0px !important;\n  }\n  .map-view-lg {\n    display: flex;\n    height: 720px;\n    margin-bottom: 8px;\n    flex-direction: row-reverse;\n  }\n  .map-tiles-lg {\n    width: 50%;\n  }\n  .map-sm {\n    height: 342px;\n    width: 100%;\n  }\n  .map-tiles-sm {\n    width: 100%;\n  }\n  .map-view-sm {\n    flex-direction: column;\n    height: unset;\n  }\n  .shipping-address {\n    overflow: hidden !important;\n  }\n</style>\n"]}]}